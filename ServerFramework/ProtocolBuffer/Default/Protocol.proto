syntax = "proto3";

enum Direction{
	UP = 0;
	DOWN = 1;
	LEFT = 2;
	RIGHT = 3;
}

message VECTOR3 {
float x = 1;
float y = 2;
float z = 3;
}

message VECTOR4
{
	float x = 1;
	float y = 2;
	float z = 3;
	float w = 4;
}

message EQINFO
{
	float gold = 1;
	float increasePower = 2;
	float increaseDefensive = 3;
	float increaseHp = 4;
}

// 움직였을 때 전송하는 함수 
message CHARSTATE
{
	int64	id = 1;
	// Move
	float  posx = 2;
	float  posy = 3;
	float  posz = 4;
	// Rotate
	float  rotatex = 5;
	float  rotatey = 6;
	float  rotatez = 7;
	int32	animationIndex = 8;
	int32  state = 9;
	int32	triggerOn = 10;
}

message MOBSTATE
{
	int64		id = 1;
	// Move
	float		posx = 2;
	float		posy = 3;
	float		posz = 4;
	// Rotate
	float		rotatex = 5;
	float		rotatey = 6;
	float		rotatez = 7;
	int32		animationIndex = 8;
	int32		state = 9;
	bool		triggerOn = 10;
	bool		foundOn = 11;
	bool		damageOn = 12;
	bool		remain2 = 13;
	float		animtime = 14;
}

message COLLISIONDATA
{
	int64 id = 1;
	int64 enemyID = 2;
}


/*
======================================
Server
======================================
*/

/*
 클라이언트가 접속에 성공했다는 것
*/
message SC_CONNECTSUCCESS{
	// id 
	int64 id = 1;
	// 시작 위치
	int32 cellIndex = 2;
	// 캐릭터 타입
	int32 type = 4;
}

// 다른 클라이언트가 로그인 했을 때 
message SC_OTHERCLIENTLOGIN 
{
	int64 id = 1;
	int32 cellIndex = 2;
	// 캐릭터 타입
	int32 type = 3;
}

 message SC_MONSTERFIND 
 {
	 int64 id = 1;
	 int32 targetID = 2;
 }

 message SC_DAMAGED
 {
	 int64 id = 1;
	 float  hp = 2;
 }

 message SC_SEEPLAYERMOVE
{
	int64 id = 1;
	// Move
	float	posX = 2;
	float	posY = 3;
	float	posZ = 4;
}

message SC_STATICOBJFIND
{
	int64 id = 1;
	int32 enable = 2;
}

message SC_HARLEQUINTHROWING
{
	int64 id = 1;
	// Pos
	float  posX = 2;
	float  posY = 3;
	float  posZ = 4;
	// throw
	int32 throwOn = 5;
	int32 index = 6;
}

message SC_ANUBISSTATE
{
	int64 id = 1;
	int32 shieldOn = 2;
	float  shieldTimer = 3;
}

/*
======================================
Client
======================================
*/

// Client가 로그인 했음을 다른 클라이언트에게 알린다. 
message CS_LOGIN 
{
	int64 id = 1;
}

// 공격했을 때 보내는 함수
message CS_ATTACK
{
	int64 id = 1;
	VECTOR3 attackPos = 2;
	float damage = 3;
}

message CS_HEAL
{
	int64 id = 1;
}

message CS_PRESSKEY
{
	int64 id = 1;
	int32 key = 2; // 작동시켰는지 판단
}

message CS_PLAYERORDER
{
	int64 id = 1;
	int32 order = 2;
}

message CS_DAMAGED 
{
	int64 id = 1;
	float damage = 2;
}

 message CS_DAMAGEDTOMONSTER
 {
	 int64 id = 1;
	 float damage = 2;
	 int64 enemyid = 3;
 }

// 연결 해제
message CS_DISCONNECT 
{
	int64 id = 1;
}