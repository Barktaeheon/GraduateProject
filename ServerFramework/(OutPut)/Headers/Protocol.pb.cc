// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr VECTOR3::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VECTOR3::VECTOR3(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VECTOR3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR VECTOR3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VECTOR3DefaultTypeInternal() {}
  union {
    VECTOR3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VECTOR3DefaultTypeInternal _VECTOR3_default_instance_;

inline constexpr SC_OTHERCLIENTLOGIN::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{::int64_t{0}},
        cellindex_{::int64_t{0}},
        type_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SC_OTHERCLIENTLOGIN::SC_OTHERCLIENTLOGIN(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SC_OTHERCLIENTLOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_OTHERCLIENTLOGINDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_OTHERCLIENTLOGINDefaultTypeInternal() {}
  union {
    SC_OTHERCLIENTLOGIN _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_OTHERCLIENTLOGINDefaultTypeInternal _SC_OTHERCLIENTLOGIN_default_instance_;

inline constexpr SC_CONNECTSUCCESS::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{::int64_t{0}},
        cellindex_{::int64_t{0}},
        type_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SC_CONNECTSUCCESS::SC_CONNECTSUCCESS(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SC_CONNECTSUCCESSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_CONNECTSUCCESSDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_CONNECTSUCCESSDefaultTypeInternal() {}
  union {
    SC_CONNECTSUCCESS _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_CONNECTSUCCESSDefaultTypeInternal _SC_CONNECTSUCCESS_default_instance_;

inline constexpr SC_CHARSTATE::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : trigger_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{::int64_t{0}},
        type_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SC_CHARSTATE::SC_CHARSTATE(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SC_CHARSTATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_CHARSTATEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_CHARSTATEDefaultTypeInternal() {}
  union {
    SC_CHARSTATE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_CHARSTATEDefaultTypeInternal _SC_CHARSTATE_default_instance_;

inline constexpr EQINFO::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : gold_{0},
        increasepower_{0},
        increasedefensive_{0},
        increasehp_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EQINFO::EQINFO(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EQINFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR EQINFODefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EQINFODefaultTypeInternal() {}
  union {
    EQINFO _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EQINFODefaultTypeInternal _EQINFO_default_instance_;

inline constexpr CS_LOGIN::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CS_LOGIN::CS_LOGIN(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CS_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_LOGINDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_LOGINDefaultTypeInternal() {}
  union {
    CS_LOGIN _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_LOGINDefaultTypeInternal _CS_LOGIN_default_instance_;

inline constexpr CS_DISCONNECT::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CS_DISCONNECT::CS_DISCONNECT(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CS_DISCONNECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_DISCONNECTDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_DISCONNECTDefaultTypeInternal() {}
  union {
    CS_DISCONNECT _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_DISCONNECTDefaultTypeInternal _CS_DISCONNECT_default_instance_;

inline constexpr CS_CHARSTATE::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : trigger_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{::int64_t{0}},
        type_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CS_CHARSTATE::CS_CHARSTATE(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CS_CHARSTATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_CHARSTATEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_CHARSTATEDefaultTypeInternal() {}
  union {
    CS_CHARSTATE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_CHARSTATEDefaultTypeInternal _CS_CHARSTATE_default_instance_;

inline constexpr SC_VIEWINRANGE::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        id_{::int64_t{0}},
        cellindex_{::int64_t{0}},
        type_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR SC_VIEWINRANGE::SC_VIEWINRANGE(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SC_VIEWINRANGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_VIEWINRANGEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_VIEWINRANGEDefaultTypeInternal() {}
  union {
    SC_VIEWINRANGE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_VIEWINRANGEDefaultTypeInternal _SC_VIEWINRANGE_default_instance_;

inline constexpr SC_MOVESTATE::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        movepos_{nullptr},
        id_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR SC_MOVESTATE::SC_MOVESTATE(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SC_MOVESTATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_MOVESTATEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_MOVESTATEDefaultTypeInternal() {}
  union {
    SC_MOVESTATE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_MOVESTATEDefaultTypeInternal _SC_MOVESTATE_default_instance_;

inline constexpr SC_MOVEFAILED::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        prevpos_{nullptr},
        id_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR SC_MOVEFAILED::SC_MOVEFAILED(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SC_MOVEFAILEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_MOVEFAILEDDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_MOVEFAILEDDefaultTypeInternal() {}
  union {
    SC_MOVEFAILED _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_MOVEFAILEDDefaultTypeInternal _SC_MOVEFAILED_default_instance_;

inline constexpr CS_MOVE::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        movepos_{nullptr},
        id_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR CS_MOVE::CS_MOVE(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CS_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_MOVEDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_MOVEDefaultTypeInternal() {}
  union {
    CS_MOVE _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_MOVEDefaultTypeInternal _CS_MOVE_default_instance_;

inline constexpr CS_ATTACK::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attackpos_{nullptr},
        id_{::int64_t{0}},
        damage_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CS_ATTACK::CS_ATTACK(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CS_ATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_ATTACKDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_ATTACKDefaultTypeInternal() {}
  union {
    CS_ATTACK _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_ATTACKDefaultTypeInternal _CS_ATTACK_default_instance_;
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Protocol_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Protocol_2eproto = nullptr;
const ::uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::VECTOR3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::VECTOR3, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::VECTOR3, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::VECTOR3, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::EQINFO, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::EQINFO, _impl_.gold_),
    PROTOBUF_FIELD_OFFSET(::EQINFO, _impl_.increasepower_),
    PROTOBUF_FIELD_OFFSET(::EQINFO, _impl_.increasedefensive_),
    PROTOBUF_FIELD_OFFSET(::EQINFO, _impl_.increasehp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::SC_CONNECTSUCCESS, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SC_CONNECTSUCCESS, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::SC_CONNECTSUCCESS, _impl_.cellindex_),
    PROTOBUF_FIELD_OFFSET(::SC_CONNECTSUCCESS, _impl_.type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::SC_OTHERCLIENTLOGIN, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SC_OTHERCLIENTLOGIN, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::SC_OTHERCLIENTLOGIN, _impl_.cellindex_),
    PROTOBUF_FIELD_OFFSET(::SC_OTHERCLIENTLOGIN, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::SC_MOVEFAILED, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::SC_MOVEFAILED, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SC_MOVEFAILED, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::SC_MOVEFAILED, _impl_.prevpos_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::SC_CHARSTATE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SC_CHARSTATE, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::SC_CHARSTATE, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::SC_CHARSTATE, _impl_.trigger_),
    PROTOBUF_FIELD_OFFSET(::SC_MOVESTATE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::SC_MOVESTATE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SC_MOVESTATE, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::SC_MOVESTATE, _impl_.movepos_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::SC_VIEWINRANGE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::SC_VIEWINRANGE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::SC_VIEWINRANGE, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::SC_VIEWINRANGE, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::SC_VIEWINRANGE, _impl_.cellindex_),
    PROTOBUF_FIELD_OFFSET(::SC_VIEWINRANGE, _impl_.type_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CS_LOGIN, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CS_LOGIN, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::CS_MOVE, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CS_MOVE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CS_MOVE, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::CS_MOVE, _impl_.movepos_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CS_CHARSTATE, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CS_CHARSTATE, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::CS_CHARSTATE, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::CS_CHARSTATE, _impl_.trigger_),
    PROTOBUF_FIELD_OFFSET(::CS_ATTACK, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CS_ATTACK, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CS_ATTACK, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::CS_ATTACK, _impl_.attackpos_),
    PROTOBUF_FIELD_OFFSET(::CS_ATTACK, _impl_.damage_),
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CS_DISCONNECT, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CS_DISCONNECT, _impl_.id_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::VECTOR3)},
        {11, -1, -1, sizeof(::EQINFO)},
        {23, -1, -1, sizeof(::SC_CONNECTSUCCESS)},
        {34, -1, -1, sizeof(::SC_OTHERCLIENTLOGIN)},
        {45, 55, -1, sizeof(::SC_MOVEFAILED)},
        {57, -1, -1, sizeof(::SC_CHARSTATE)},
        {68, 78, -1, sizeof(::SC_MOVESTATE)},
        {80, 92, -1, sizeof(::SC_VIEWINRANGE)},
        {96, -1, -1, sizeof(::CS_LOGIN)},
        {105, 115, -1, sizeof(::CS_MOVE)},
        {117, -1, -1, sizeof(::CS_CHARSTATE)},
        {128, 139, -1, sizeof(::CS_ATTACK)},
        {142, -1, -1, sizeof(::CS_DISCONNECT)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_VECTOR3_default_instance_._instance,
    &::_EQINFO_default_instance_._instance,
    &::_SC_CONNECTSUCCESS_default_instance_._instance,
    &::_SC_OTHERCLIENTLOGIN_default_instance_._instance,
    &::_SC_MOVEFAILED_default_instance_._instance,
    &::_SC_CHARSTATE_default_instance_._instance,
    &::_SC_MOVESTATE_default_instance_._instance,
    &::_SC_VIEWINRANGE_default_instance_._instance,
    &::_CS_LOGIN_default_instance_._instance,
    &::_CS_MOVE_default_instance_._instance,
    &::_CS_CHARSTATE_default_instance_._instance,
    &::_CS_ATTACK_default_instance_._instance,
    &::_CS_DISCONNECT_default_instance_._instance,
};
const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016Protocol.proto\"*\n\007VECTOR3\022\t\n\001x\030\001 \001(\002\022\t"
    "\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\\\n\006EQINFO\022\014\n\004gold\030\001"
    " \001(\002\022\025\n\rincreasePower\030\002 \001(\002\022\031\n\021increaseD"
    "efensive\030\003 \001(\002\022\022\n\nincreaseHp\030\004 \001(\002\"@\n\021SC"
    "_CONNECTSUCCESS\022\n\n\002id\030\001 \001(\003\022\021\n\tcellIndex"
    "\030\002 \001(\003\022\014\n\004type\030\004 \001(\003\"B\n\023SC_OTHERCLIENTLO"
    "GIN\022\n\n\002id\030\001 \001(\003\022\021\n\tcellIndex\030\002 \001(\003\022\014\n\004ty"
    "pe\030\003 \001(\003\"6\n\rSC_MOVEFAILED\022\n\n\002id\030\001 \001(\003\022\031\n"
    "\007prevPos\030\003 \001(\0132\010.VECTOR3\"9\n\014SC_CHARSTATE"
    "\022\n\n\002id\030\001 \001(\003\022\014\n\004type\030\002 \001(\003\022\017\n\007trigger\030\003 "
    "\001(\t\"5\n\014SC_MOVESTATE\022\n\n\002id\030\001 \001(\003\022\031\n\007moveP"
    "os\030\002 \001(\0132\010.VECTOR3\"Y\n\016SC_VIEWINRANGE\022\n\n\002"
    "id\030\001 \001(\003\022\032\n\010position\030\002 \001(\0132\010.VECTOR3\022\021\n\t"
    "cellindex\030\003 \001(\003\022\014\n\004type\030\004 \001(\003\"\026\n\010CS_LOGI"
    "N\022\n\n\002id\030\001 \001(\003\"0\n\007CS_MOVE\022\n\n\002id\030\001 \001(\003\022\031\n\007"
    "movePos\030\002 \001(\0132\010.VECTOR3\"9\n\014CS_CHARSTATE\022"
    "\n\n\002id\030\001 \001(\003\022\014\n\004type\030\002 \001(\003\022\017\n\007trigger\030\003 \001"
    "(\t\"D\n\tCS_ATTACK\022\n\n\002id\030\001 \001(\003\022\033\n\tattackPos"
    "\030\002 \001(\0132\010.VECTOR3\022\016\n\006damage\030\003 \001(\002\"\033\n\rCS_D"
    "ISCONNECT\022\n\n\002id\030\001 \001(\003*2\n\tDirection\022\006\n\002UP"
    "\020\000\022\010\n\004DOWN\020\001\022\010\n\004LEFT\020\002\022\t\n\005RIGHT\020\003b\006proto"
    "3"
};
static ::absl::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false,
    false,
    841,
    descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once,
    nullptr,
    0,
    13,
    schemas,
    file_default_instances,
    TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto,
    file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
const ::google::protobuf::EnumDescriptor* Direction_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Direction_internal_data_[] = {
    262144u, 0u, };
bool Direction_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class VECTOR3::_Internal {
 public:
};

VECTOR3::VECTOR3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VECTOR3)
}
VECTOR3::VECTOR3(
    ::google::protobuf::Arena* arena, const VECTOR3& from)
    : VECTOR3(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE VECTOR3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void VECTOR3::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
VECTOR3::~VECTOR3() {
  // @@protoc_insertion_point(destructor:VECTOR3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VECTOR3::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VECTOR3::Clear() {
// @@protoc_insertion_point(message_clear_start:VECTOR3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VECTOR3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> VECTOR3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VECTOR3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* VECTOR3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VECTOR3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VECTOR3)
  return target;
}

::size_t VECTOR3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VECTOR3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VECTOR3::_class_data_ = {
    VECTOR3::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VECTOR3::GetClassData() const {
  return &_class_data_;
}

void VECTOR3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VECTOR3*>(&to_msg);
  auto& from = static_cast<const VECTOR3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VECTOR3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VECTOR3::CopyFrom(const VECTOR3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VECTOR3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VECTOR3::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VECTOR3::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VECTOR3::InternalSwap(VECTOR3* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.z_)
      + sizeof(VECTOR3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(VECTOR3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata VECTOR3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}
// ===================================================================

class EQINFO::_Internal {
 public:
};

EQINFO::EQINFO(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:EQINFO)
}
EQINFO::EQINFO(
    ::google::protobuf::Arena* arena, const EQINFO& from)
    : EQINFO(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE EQINFO::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EQINFO::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, gold_),
           0,
           offsetof(Impl_, increasehp_) -
               offsetof(Impl_, gold_) +
               sizeof(Impl_::increasehp_));
}
EQINFO::~EQINFO() {
  // @@protoc_insertion_point(destructor:EQINFO)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EQINFO::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EQINFO::Clear() {
// @@protoc_insertion_point(message_clear_start:EQINFO)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gold_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.increasehp_) -
      reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.increasehp_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EQINFO::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> EQINFO::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EQINFO_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float increaseHp = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(EQINFO, _impl_.increasehp_)}},
    // float gold = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(EQINFO, _impl_.gold_)}},
    // float increasePower = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(EQINFO, _impl_.increasepower_)}},
    // float increaseDefensive = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(EQINFO, _impl_.increasedefensive_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float gold = 1;
    {PROTOBUF_FIELD_OFFSET(EQINFO, _impl_.gold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float increasePower = 2;
    {PROTOBUF_FIELD_OFFSET(EQINFO, _impl_.increasepower_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float increaseDefensive = 3;
    {PROTOBUF_FIELD_OFFSET(EQINFO, _impl_.increasedefensive_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float increaseHp = 4;
    {PROTOBUF_FIELD_OFFSET(EQINFO, _impl_.increasehp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* EQINFO::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EQINFO)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float gold = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gold = this->_internal_gold();
  ::uint32_t raw_gold;
  memcpy(&raw_gold, &tmp_gold, sizeof(tmp_gold));
  if (raw_gold != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_gold(), target);
  }

  // float increasePower = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_increasepower = this->_internal_increasepower();
  ::uint32_t raw_increasepower;
  memcpy(&raw_increasepower, &tmp_increasepower, sizeof(tmp_increasepower));
  if (raw_increasepower != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_increasepower(), target);
  }

  // float increaseDefensive = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_increasedefensive = this->_internal_increasedefensive();
  ::uint32_t raw_increasedefensive;
  memcpy(&raw_increasedefensive, &tmp_increasedefensive, sizeof(tmp_increasedefensive));
  if (raw_increasedefensive != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_increasedefensive(), target);
  }

  // float increaseHp = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_increasehp = this->_internal_increasehp();
  ::uint32_t raw_increasehp;
  memcpy(&raw_increasehp, &tmp_increasehp, sizeof(tmp_increasehp));
  if (raw_increasehp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_increasehp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EQINFO)
  return target;
}

::size_t EQINFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EQINFO)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float gold = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gold = this->_internal_gold();
  ::uint32_t raw_gold;
  memcpy(&raw_gold, &tmp_gold, sizeof(tmp_gold));
  if (raw_gold != 0) {
    total_size += 5;
  }

  // float increasePower = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_increasepower = this->_internal_increasepower();
  ::uint32_t raw_increasepower;
  memcpy(&raw_increasepower, &tmp_increasepower, sizeof(tmp_increasepower));
  if (raw_increasepower != 0) {
    total_size += 5;
  }

  // float increaseDefensive = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_increasedefensive = this->_internal_increasedefensive();
  ::uint32_t raw_increasedefensive;
  memcpy(&raw_increasedefensive, &tmp_increasedefensive, sizeof(tmp_increasedefensive));
  if (raw_increasedefensive != 0) {
    total_size += 5;
  }

  // float increaseHp = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_increasehp = this->_internal_increasehp();
  ::uint32_t raw_increasehp;
  memcpy(&raw_increasehp, &tmp_increasehp, sizeof(tmp_increasehp));
  if (raw_increasehp != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EQINFO::_class_data_ = {
    EQINFO::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EQINFO::GetClassData() const {
  return &_class_data_;
}

void EQINFO::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EQINFO*>(&to_msg);
  auto& from = static_cast<const EQINFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EQINFO)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_gold = from._internal_gold();
  ::uint32_t raw_gold;
  memcpy(&raw_gold, &tmp_gold, sizeof(tmp_gold));
  if (raw_gold != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_increasepower = from._internal_increasepower();
  ::uint32_t raw_increasepower;
  memcpy(&raw_increasepower, &tmp_increasepower, sizeof(tmp_increasepower));
  if (raw_increasepower != 0) {
    _this->_internal_set_increasepower(from._internal_increasepower());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_increasedefensive = from._internal_increasedefensive();
  ::uint32_t raw_increasedefensive;
  memcpy(&raw_increasedefensive, &tmp_increasedefensive, sizeof(tmp_increasedefensive));
  if (raw_increasedefensive != 0) {
    _this->_internal_set_increasedefensive(from._internal_increasedefensive());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_increasehp = from._internal_increasehp();
  ::uint32_t raw_increasehp;
  memcpy(&raw_increasehp, &tmp_increasehp, sizeof(tmp_increasehp));
  if (raw_increasehp != 0) {
    _this->_internal_set_increasehp(from._internal_increasehp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EQINFO::CopyFrom(const EQINFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EQINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EQINFO::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EQINFO::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EQINFO::InternalSwap(EQINFO* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EQINFO, _impl_.increasehp_)
      + sizeof(EQINFO::_impl_.increasehp_)
      - PROTOBUF_FIELD_OFFSET(EQINFO, _impl_.gold_)>(
          reinterpret_cast<char*>(&_impl_.gold_),
          reinterpret_cast<char*>(&other->_impl_.gold_));
}

::google::protobuf::Metadata EQINFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}
// ===================================================================

class SC_CONNECTSUCCESS::_Internal {
 public:
};

SC_CONNECTSUCCESS::SC_CONNECTSUCCESS(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SC_CONNECTSUCCESS)
}
SC_CONNECTSUCCESS::SC_CONNECTSUCCESS(
    ::google::protobuf::Arena* arena, const SC_CONNECTSUCCESS& from)
    : SC_CONNECTSUCCESS(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SC_CONNECTSUCCESS::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SC_CONNECTSUCCESS::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::type_));
}
SC_CONNECTSUCCESS::~SC_CONNECTSUCCESS() {
  // @@protoc_insertion_point(destructor:SC_CONNECTSUCCESS)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SC_CONNECTSUCCESS::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SC_CONNECTSUCCESS::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_CONNECTSUCCESS)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SC_CONNECTSUCCESS::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> SC_CONNECTSUCCESS::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967284,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SC_CONNECTSUCCESS_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SC_CONNECTSUCCESS, _impl_.type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SC_CONNECTSUCCESS, _impl_.type_)}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SC_CONNECTSUCCESS, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SC_CONNECTSUCCESS, _impl_.id_)}},
    // int64 cellIndex = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SC_CONNECTSUCCESS, _impl_.cellindex_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SC_CONNECTSUCCESS, _impl_.cellindex_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(SC_CONNECTSUCCESS, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 cellIndex = 2;
    {PROTOBUF_FIELD_OFFSET(SC_CONNECTSUCCESS, _impl_.cellindex_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 type = 4;
    {PROTOBUF_FIELD_OFFSET(SC_CONNECTSUCCESS, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SC_CONNECTSUCCESS::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_CONNECTSUCCESS)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int64 cellIndex = 2;
  if (this->_internal_cellindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_cellindex(), target);
  }

  // int64 type = 4;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_CONNECTSUCCESS)
  return target;
}

::size_t SC_CONNECTSUCCESS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_CONNECTSUCCESS)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // int64 cellIndex = 2;
  if (this->_internal_cellindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_cellindex());
  }

  // int64 type = 4;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SC_CONNECTSUCCESS::_class_data_ = {
    SC_CONNECTSUCCESS::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SC_CONNECTSUCCESS::GetClassData() const {
  return &_class_data_;
}

void SC_CONNECTSUCCESS::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SC_CONNECTSUCCESS*>(&to_msg);
  auto& from = static_cast<const SC_CONNECTSUCCESS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC_CONNECTSUCCESS)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_cellindex() != 0) {
    _this->_internal_set_cellindex(from._internal_cellindex());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SC_CONNECTSUCCESS::CopyFrom(const SC_CONNECTSUCCESS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_CONNECTSUCCESS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SC_CONNECTSUCCESS::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SC_CONNECTSUCCESS::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SC_CONNECTSUCCESS::InternalSwap(SC_CONNECTSUCCESS* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_CONNECTSUCCESS, _impl_.type_)
      + sizeof(SC_CONNECTSUCCESS::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SC_CONNECTSUCCESS, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata SC_CONNECTSUCCESS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}
// ===================================================================

class SC_OTHERCLIENTLOGIN::_Internal {
 public:
};

SC_OTHERCLIENTLOGIN::SC_OTHERCLIENTLOGIN(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SC_OTHERCLIENTLOGIN)
}
SC_OTHERCLIENTLOGIN::SC_OTHERCLIENTLOGIN(
    ::google::protobuf::Arena* arena, const SC_OTHERCLIENTLOGIN& from)
    : SC_OTHERCLIENTLOGIN(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SC_OTHERCLIENTLOGIN::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SC_OTHERCLIENTLOGIN::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::type_));
}
SC_OTHERCLIENTLOGIN::~SC_OTHERCLIENTLOGIN() {
  // @@protoc_insertion_point(destructor:SC_OTHERCLIENTLOGIN)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SC_OTHERCLIENTLOGIN::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SC_OTHERCLIENTLOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_OTHERCLIENTLOGIN)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SC_OTHERCLIENTLOGIN::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> SC_OTHERCLIENTLOGIN::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SC_OTHERCLIENTLOGIN_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SC_OTHERCLIENTLOGIN, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SC_OTHERCLIENTLOGIN, _impl_.id_)}},
    // int64 cellIndex = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SC_OTHERCLIENTLOGIN, _impl_.cellindex_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SC_OTHERCLIENTLOGIN, _impl_.cellindex_)}},
    // int64 type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SC_OTHERCLIENTLOGIN, _impl_.type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SC_OTHERCLIENTLOGIN, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(SC_OTHERCLIENTLOGIN, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 cellIndex = 2;
    {PROTOBUF_FIELD_OFFSET(SC_OTHERCLIENTLOGIN, _impl_.cellindex_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 type = 3;
    {PROTOBUF_FIELD_OFFSET(SC_OTHERCLIENTLOGIN, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SC_OTHERCLIENTLOGIN::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_OTHERCLIENTLOGIN)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int64 cellIndex = 2;
  if (this->_internal_cellindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_cellindex(), target);
  }

  // int64 type = 3;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_OTHERCLIENTLOGIN)
  return target;
}

::size_t SC_OTHERCLIENTLOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_OTHERCLIENTLOGIN)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // int64 cellIndex = 2;
  if (this->_internal_cellindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_cellindex());
  }

  // int64 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SC_OTHERCLIENTLOGIN::_class_data_ = {
    SC_OTHERCLIENTLOGIN::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SC_OTHERCLIENTLOGIN::GetClassData() const {
  return &_class_data_;
}

void SC_OTHERCLIENTLOGIN::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SC_OTHERCLIENTLOGIN*>(&to_msg);
  auto& from = static_cast<const SC_OTHERCLIENTLOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC_OTHERCLIENTLOGIN)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_cellindex() != 0) {
    _this->_internal_set_cellindex(from._internal_cellindex());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SC_OTHERCLIENTLOGIN::CopyFrom(const SC_OTHERCLIENTLOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_OTHERCLIENTLOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SC_OTHERCLIENTLOGIN::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SC_OTHERCLIENTLOGIN::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SC_OTHERCLIENTLOGIN::InternalSwap(SC_OTHERCLIENTLOGIN* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_OTHERCLIENTLOGIN, _impl_.type_)
      + sizeof(SC_OTHERCLIENTLOGIN::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SC_OTHERCLIENTLOGIN, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata SC_OTHERCLIENTLOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}
// ===================================================================

class SC_MOVEFAILED::_Internal {
 public:
  using HasBits = decltype(std::declval<SC_MOVEFAILED>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SC_MOVEFAILED, _impl_._has_bits_);
  static const ::VECTOR3& prevpos(const SC_MOVEFAILED* msg);
  static void set_has_prevpos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::VECTOR3& SC_MOVEFAILED::_Internal::prevpos(const SC_MOVEFAILED* msg) {
  return *msg->_impl_.prevpos_;
}
SC_MOVEFAILED::SC_MOVEFAILED(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SC_MOVEFAILED)
}
inline PROTOBUF_NDEBUG_INLINE SC_MOVEFAILED::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SC_MOVEFAILED::SC_MOVEFAILED(
    ::google::protobuf::Arena* arena,
    const SC_MOVEFAILED& from)
    : ::google::protobuf::Message(arena) {
  SC_MOVEFAILED* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.prevpos_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::VECTOR3>(arena, *from._impl_.prevpos_)
                : nullptr;
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:SC_MOVEFAILED)
}
inline PROTOBUF_NDEBUG_INLINE SC_MOVEFAILED::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SC_MOVEFAILED::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, prevpos_),
           0,
           offsetof(Impl_, id_) -
               offsetof(Impl_, prevpos_) +
               sizeof(Impl_::id_));
}
SC_MOVEFAILED::~SC_MOVEFAILED() {
  // @@protoc_insertion_point(destructor:SC_MOVEFAILED)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SC_MOVEFAILED::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.prevpos_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SC_MOVEFAILED::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_MOVEFAILED)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.prevpos_ != nullptr);
    _impl_.prevpos_->Clear();
  }
  _impl_.id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SC_MOVEFAILED::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 2, 1, 0, 2> SC_MOVEFAILED::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SC_MOVEFAILED, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967290,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SC_MOVEFAILED_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SC_MOVEFAILED, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SC_MOVEFAILED, _impl_.id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .VECTOR3 prevPos = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(SC_MOVEFAILED, _impl_.prevpos_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(SC_MOVEFAILED, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .VECTOR3 prevPos = 3;
    {PROTOBUF_FIELD_OFFSET(SC_MOVEFAILED, _impl_.prevpos_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VECTOR3>()},
  }}, {{
  }},
};

::uint8_t* SC_MOVEFAILED::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_MOVEFAILED)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .VECTOR3 prevPos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::prevpos(this),
        _Internal::prevpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_MOVEFAILED)
  return target;
}

::size_t SC_MOVEFAILED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_MOVEFAILED)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VECTOR3 prevPos = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.prevpos_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SC_MOVEFAILED::_class_data_ = {
    SC_MOVEFAILED::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SC_MOVEFAILED::GetClassData() const {
  return &_class_data_;
}

void SC_MOVEFAILED::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SC_MOVEFAILED*>(&to_msg);
  auto& from = static_cast<const SC_MOVEFAILED&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC_MOVEFAILED)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_prevpos()->::VECTOR3::MergeFrom(
        from._internal_prevpos());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SC_MOVEFAILED::CopyFrom(const SC_MOVEFAILED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_MOVEFAILED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SC_MOVEFAILED::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SC_MOVEFAILED::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SC_MOVEFAILED::InternalSwap(SC_MOVEFAILED* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_MOVEFAILED, _impl_.id_)
      + sizeof(SC_MOVEFAILED::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(SC_MOVEFAILED, _impl_.prevpos_)>(
          reinterpret_cast<char*>(&_impl_.prevpos_),
          reinterpret_cast<char*>(&other->_impl_.prevpos_));
}

::google::protobuf::Metadata SC_MOVEFAILED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}
// ===================================================================

class SC_CHARSTATE::_Internal {
 public:
};

SC_CHARSTATE::SC_CHARSTATE(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SC_CHARSTATE)
}
inline PROTOBUF_NDEBUG_INLINE SC_CHARSTATE::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : trigger_(arena, from.trigger_),
        _cached_size_{0} {}

SC_CHARSTATE::SC_CHARSTATE(
    ::google::protobuf::Arena* arena,
    const SC_CHARSTATE& from)
    : ::google::protobuf::Message(arena) {
  SC_CHARSTATE* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:SC_CHARSTATE)
}
inline PROTOBUF_NDEBUG_INLINE SC_CHARSTATE::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : trigger_(arena),
        _cached_size_{0} {}

inline void SC_CHARSTATE::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::type_));
}
SC_CHARSTATE::~SC_CHARSTATE() {
  // @@protoc_insertion_point(destructor:SC_CHARSTATE)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SC_CHARSTATE::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.trigger_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SC_CHARSTATE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_CHARSTATE)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trigger_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SC_CHARSTATE::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 28, 2> SC_CHARSTATE::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SC_CHARSTATE_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SC_CHARSTATE, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SC_CHARSTATE, _impl_.id_)}},
    // int64 type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SC_CHARSTATE, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SC_CHARSTATE, _impl_.type_)}},
    // string trigger = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SC_CHARSTATE, _impl_.trigger_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(SC_CHARSTATE, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 type = 2;
    {PROTOBUF_FIELD_OFFSET(SC_CHARSTATE, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string trigger = 3;
    {PROTOBUF_FIELD_OFFSET(SC_CHARSTATE, _impl_.trigger_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\14\0\0\7\0\0\0\0"
    "SC_CHARSTATE"
    "trigger"
  }},
};

::uint8_t* SC_CHARSTATE::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_CHARSTATE)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int64 type = 2;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_type(), target);
  }

  // string trigger = 3;
  if (!this->_internal_trigger().empty()) {
    const std::string& _s = this->_internal_trigger();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "SC_CHARSTATE.trigger");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_CHARSTATE)
  return target;
}

::size_t SC_CHARSTATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_CHARSTATE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trigger = 3;
  if (!this->_internal_trigger().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_trigger());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // int64 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SC_CHARSTATE::_class_data_ = {
    SC_CHARSTATE::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SC_CHARSTATE::GetClassData() const {
  return &_class_data_;
}

void SC_CHARSTATE::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SC_CHARSTATE*>(&to_msg);
  auto& from = static_cast<const SC_CHARSTATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC_CHARSTATE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trigger().empty()) {
    _this->_internal_set_trigger(from._internal_trigger());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SC_CHARSTATE::CopyFrom(const SC_CHARSTATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_CHARSTATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SC_CHARSTATE::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SC_CHARSTATE::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SC_CHARSTATE::InternalSwap(SC_CHARSTATE* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trigger_, &other->_impl_.trigger_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_CHARSTATE, _impl_.type_)
      + sizeof(SC_CHARSTATE::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SC_CHARSTATE, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata SC_CHARSTATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}
// ===================================================================

class SC_MOVESTATE::_Internal {
 public:
  using HasBits = decltype(std::declval<SC_MOVESTATE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SC_MOVESTATE, _impl_._has_bits_);
  static const ::VECTOR3& movepos(const SC_MOVESTATE* msg);
  static void set_has_movepos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::VECTOR3& SC_MOVESTATE::_Internal::movepos(const SC_MOVESTATE* msg) {
  return *msg->_impl_.movepos_;
}
SC_MOVESTATE::SC_MOVESTATE(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SC_MOVESTATE)
}
inline PROTOBUF_NDEBUG_INLINE SC_MOVESTATE::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SC_MOVESTATE::SC_MOVESTATE(
    ::google::protobuf::Arena* arena,
    const SC_MOVESTATE& from)
    : ::google::protobuf::Message(arena) {
  SC_MOVESTATE* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.movepos_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::VECTOR3>(arena, *from._impl_.movepos_)
                : nullptr;
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:SC_MOVESTATE)
}
inline PROTOBUF_NDEBUG_INLINE SC_MOVESTATE::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SC_MOVESTATE::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, movepos_),
           0,
           offsetof(Impl_, id_) -
               offsetof(Impl_, movepos_) +
               sizeof(Impl_::id_));
}
SC_MOVESTATE::~SC_MOVESTATE() {
  // @@protoc_insertion_point(destructor:SC_MOVESTATE)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SC_MOVESTATE::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.movepos_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SC_MOVESTATE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_MOVESTATE)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.movepos_ != nullptr);
    _impl_.movepos_->Clear();
  }
  _impl_.id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SC_MOVESTATE::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SC_MOVESTATE::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SC_MOVESTATE, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SC_MOVESTATE_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .VECTOR3 movePos = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SC_MOVESTATE, _impl_.movepos_)}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SC_MOVESTATE, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SC_MOVESTATE, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(SC_MOVESTATE, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .VECTOR3 movePos = 2;
    {PROTOBUF_FIELD_OFFSET(SC_MOVESTATE, _impl_.movepos_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VECTOR3>()},
  }}, {{
  }},
};

::uint8_t* SC_MOVESTATE::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_MOVESTATE)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .VECTOR3 movePos = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::movepos(this),
        _Internal::movepos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_MOVESTATE)
  return target;
}

::size_t SC_MOVESTATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_MOVESTATE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VECTOR3 movePos = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.movepos_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SC_MOVESTATE::_class_data_ = {
    SC_MOVESTATE::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SC_MOVESTATE::GetClassData() const {
  return &_class_data_;
}

void SC_MOVESTATE::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SC_MOVESTATE*>(&to_msg);
  auto& from = static_cast<const SC_MOVESTATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC_MOVESTATE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_movepos()->::VECTOR3::MergeFrom(
        from._internal_movepos());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SC_MOVESTATE::CopyFrom(const SC_MOVESTATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_MOVESTATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SC_MOVESTATE::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SC_MOVESTATE::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SC_MOVESTATE::InternalSwap(SC_MOVESTATE* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_MOVESTATE, _impl_.id_)
      + sizeof(SC_MOVESTATE::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(SC_MOVESTATE, _impl_.movepos_)>(
          reinterpret_cast<char*>(&_impl_.movepos_),
          reinterpret_cast<char*>(&other->_impl_.movepos_));
}

::google::protobuf::Metadata SC_MOVESTATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}
// ===================================================================

class SC_VIEWINRANGE::_Internal {
 public:
  using HasBits = decltype(std::declval<SC_VIEWINRANGE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SC_VIEWINRANGE, _impl_._has_bits_);
  static const ::VECTOR3& position(const SC_VIEWINRANGE* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::VECTOR3& SC_VIEWINRANGE::_Internal::position(const SC_VIEWINRANGE* msg) {
  return *msg->_impl_.position_;
}
SC_VIEWINRANGE::SC_VIEWINRANGE(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SC_VIEWINRANGE)
}
inline PROTOBUF_NDEBUG_INLINE SC_VIEWINRANGE::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SC_VIEWINRANGE::SC_VIEWINRANGE(
    ::google::protobuf::Arena* arena,
    const SC_VIEWINRANGE& from)
    : ::google::protobuf::Message(arena) {
  SC_VIEWINRANGE* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::VECTOR3>(arena, *from._impl_.position_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:SC_VIEWINRANGE)
}
inline PROTOBUF_NDEBUG_INLINE SC_VIEWINRANGE::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SC_VIEWINRANGE::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::type_));
}
SC_VIEWINRANGE::~SC_VIEWINRANGE() {
  // @@protoc_insertion_point(destructor:SC_VIEWINRANGE)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SC_VIEWINRANGE::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SC_VIEWINRANGE::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_VIEWINRANGE)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SC_VIEWINRANGE::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> SC_VIEWINRANGE::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SC_VIEWINRANGE, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SC_VIEWINRANGE_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SC_VIEWINRANGE, _impl_.type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SC_VIEWINRANGE, _impl_.type_)}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SC_VIEWINRANGE, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SC_VIEWINRANGE, _impl_.id_)}},
    // .VECTOR3 position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SC_VIEWINRANGE, _impl_.position_)}},
    // int64 cellindex = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SC_VIEWINRANGE, _impl_.cellindex_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SC_VIEWINRANGE, _impl_.cellindex_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(SC_VIEWINRANGE, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .VECTOR3 position = 2;
    {PROTOBUF_FIELD_OFFSET(SC_VIEWINRANGE, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 cellindex = 3;
    {PROTOBUF_FIELD_OFFSET(SC_VIEWINRANGE, _impl_.cellindex_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 type = 4;
    {PROTOBUF_FIELD_OFFSET(SC_VIEWINRANGE, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VECTOR3>()},
  }}, {{
  }},
};

::uint8_t* SC_VIEWINRANGE::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_VIEWINRANGE)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .VECTOR3 position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // int64 cellindex = 3;
  if (this->_internal_cellindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_cellindex(), target);
  }

  // int64 type = 4;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC_VIEWINRANGE)
  return target;
}

::size_t SC_VIEWINRANGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC_VIEWINRANGE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VECTOR3 position = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // int64 cellindex = 3;
  if (this->_internal_cellindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_cellindex());
  }

  // int64 type = 4;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SC_VIEWINRANGE::_class_data_ = {
    SC_VIEWINRANGE::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SC_VIEWINRANGE::GetClassData() const {
  return &_class_data_;
}

void SC_VIEWINRANGE::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SC_VIEWINRANGE*>(&to_msg);
  auto& from = static_cast<const SC_VIEWINRANGE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SC_VIEWINRANGE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_position()->::VECTOR3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_cellindex() != 0) {
    _this->_internal_set_cellindex(from._internal_cellindex());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SC_VIEWINRANGE::CopyFrom(const SC_VIEWINRANGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_VIEWINRANGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SC_VIEWINRANGE::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SC_VIEWINRANGE::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SC_VIEWINRANGE::InternalSwap(SC_VIEWINRANGE* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_VIEWINRANGE, _impl_.type_)
      + sizeof(SC_VIEWINRANGE::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SC_VIEWINRANGE, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata SC_VIEWINRANGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}
// ===================================================================

class CS_LOGIN::_Internal {
 public:
};

CS_LOGIN::CS_LOGIN(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CS_LOGIN)
}
CS_LOGIN::CS_LOGIN(
    ::google::protobuf::Arena* arena, const CS_LOGIN& from)
    : CS_LOGIN(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CS_LOGIN::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CS_LOGIN::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_ = {};
}
CS_LOGIN::~CS_LOGIN() {
  // @@protoc_insertion_point(destructor:CS_LOGIN)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CS_LOGIN::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CS_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_LOGIN)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CS_LOGIN::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> CS_LOGIN::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CS_LOGIN_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CS_LOGIN, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CS_LOGIN, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(CS_LOGIN, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CS_LOGIN::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_LOGIN)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_LOGIN)
  return target;
}

::size_t CS_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_LOGIN)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CS_LOGIN::_class_data_ = {
    CS_LOGIN::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CS_LOGIN::GetClassData() const {
  return &_class_data_;
}

void CS_LOGIN::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CS_LOGIN*>(&to_msg);
  auto& from = static_cast<const CS_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CS_LOGIN)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CS_LOGIN::CopyFrom(const CS_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CS_LOGIN::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CS_LOGIN::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CS_LOGIN::InternalSwap(CS_LOGIN* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata CS_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}
// ===================================================================

class CS_MOVE::_Internal {
 public:
  using HasBits = decltype(std::declval<CS_MOVE>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CS_MOVE, _impl_._has_bits_);
  static const ::VECTOR3& movepos(const CS_MOVE* msg);
  static void set_has_movepos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::VECTOR3& CS_MOVE::_Internal::movepos(const CS_MOVE* msg) {
  return *msg->_impl_.movepos_;
}
CS_MOVE::CS_MOVE(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CS_MOVE)
}
inline PROTOBUF_NDEBUG_INLINE CS_MOVE::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CS_MOVE::CS_MOVE(
    ::google::protobuf::Arena* arena,
    const CS_MOVE& from)
    : ::google::protobuf::Message(arena) {
  CS_MOVE* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.movepos_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::VECTOR3>(arena, *from._impl_.movepos_)
                : nullptr;
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:CS_MOVE)
}
inline PROTOBUF_NDEBUG_INLINE CS_MOVE::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CS_MOVE::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, movepos_),
           0,
           offsetof(Impl_, id_) -
               offsetof(Impl_, movepos_) +
               sizeof(Impl_::id_));
}
CS_MOVE::~CS_MOVE() {
  // @@protoc_insertion_point(destructor:CS_MOVE)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CS_MOVE::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.movepos_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CS_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_MOVE)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.movepos_ != nullptr);
    _impl_.movepos_->Clear();
  }
  _impl_.id_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CS_MOVE::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> CS_MOVE::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CS_MOVE, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CS_MOVE_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .VECTOR3 movePos = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CS_MOVE, _impl_.movepos_)}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CS_MOVE, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CS_MOVE, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(CS_MOVE, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .VECTOR3 movePos = 2;
    {PROTOBUF_FIELD_OFFSET(CS_MOVE, _impl_.movepos_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VECTOR3>()},
  }}, {{
  }},
};

::uint8_t* CS_MOVE::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_MOVE)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .VECTOR3 movePos = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::movepos(this),
        _Internal::movepos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_MOVE)
  return target;
}

::size_t CS_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_MOVE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VECTOR3 movePos = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.movepos_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CS_MOVE::_class_data_ = {
    CS_MOVE::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CS_MOVE::GetClassData() const {
  return &_class_data_;
}

void CS_MOVE::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CS_MOVE*>(&to_msg);
  auto& from = static_cast<const CS_MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CS_MOVE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_movepos()->::VECTOR3::MergeFrom(
        from._internal_movepos());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CS_MOVE::CopyFrom(const CS_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CS_MOVE::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CS_MOVE::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CS_MOVE::InternalSwap(CS_MOVE* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_MOVE, _impl_.id_)
      + sizeof(CS_MOVE::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(CS_MOVE, _impl_.movepos_)>(
          reinterpret_cast<char*>(&_impl_.movepos_),
          reinterpret_cast<char*>(&other->_impl_.movepos_));
}

::google::protobuf::Metadata CS_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}
// ===================================================================

class CS_CHARSTATE::_Internal {
 public:
};

CS_CHARSTATE::CS_CHARSTATE(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CS_CHARSTATE)
}
inline PROTOBUF_NDEBUG_INLINE CS_CHARSTATE::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : trigger_(arena, from.trigger_),
        _cached_size_{0} {}

CS_CHARSTATE::CS_CHARSTATE(
    ::google::protobuf::Arena* arena,
    const CS_CHARSTATE& from)
    : ::google::protobuf::Message(arena) {
  CS_CHARSTATE* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:CS_CHARSTATE)
}
inline PROTOBUF_NDEBUG_INLINE CS_CHARSTATE::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : trigger_(arena),
        _cached_size_{0} {}

inline void CS_CHARSTATE::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::type_));
}
CS_CHARSTATE::~CS_CHARSTATE() {
  // @@protoc_insertion_point(destructor:CS_CHARSTATE)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CS_CHARSTATE::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.trigger_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CS_CHARSTATE::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_CHARSTATE)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trigger_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CS_CHARSTATE::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 28, 2> CS_CHARSTATE::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CS_CHARSTATE_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CS_CHARSTATE, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CS_CHARSTATE, _impl_.id_)}},
    // int64 type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CS_CHARSTATE, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CS_CHARSTATE, _impl_.type_)}},
    // string trigger = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CS_CHARSTATE, _impl_.trigger_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(CS_CHARSTATE, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 type = 2;
    {PROTOBUF_FIELD_OFFSET(CS_CHARSTATE, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string trigger = 3;
    {PROTOBUF_FIELD_OFFSET(CS_CHARSTATE, _impl_.trigger_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\14\0\0\7\0\0\0\0"
    "CS_CHARSTATE"
    "trigger"
  }},
};

::uint8_t* CS_CHARSTATE::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_CHARSTATE)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // int64 type = 2;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_type(), target);
  }

  // string trigger = 3;
  if (!this->_internal_trigger().empty()) {
    const std::string& _s = this->_internal_trigger();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "CS_CHARSTATE.trigger");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_CHARSTATE)
  return target;
}

::size_t CS_CHARSTATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_CHARSTATE)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trigger = 3;
  if (!this->_internal_trigger().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_trigger());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // int64 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CS_CHARSTATE::_class_data_ = {
    CS_CHARSTATE::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CS_CHARSTATE::GetClassData() const {
  return &_class_data_;
}

void CS_CHARSTATE::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CS_CHARSTATE*>(&to_msg);
  auto& from = static_cast<const CS_CHARSTATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CS_CHARSTATE)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trigger().empty()) {
    _this->_internal_set_trigger(from._internal_trigger());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CS_CHARSTATE::CopyFrom(const CS_CHARSTATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_CHARSTATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CS_CHARSTATE::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CS_CHARSTATE::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CS_CHARSTATE::InternalSwap(CS_CHARSTATE* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trigger_, &other->_impl_.trigger_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_CHARSTATE, _impl_.type_)
      + sizeof(CS_CHARSTATE::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CS_CHARSTATE, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata CS_CHARSTATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}
// ===================================================================

class CS_ATTACK::_Internal {
 public:
  using HasBits = decltype(std::declval<CS_ATTACK>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CS_ATTACK, _impl_._has_bits_);
  static const ::VECTOR3& attackpos(const CS_ATTACK* msg);
  static void set_has_attackpos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::VECTOR3& CS_ATTACK::_Internal::attackpos(const CS_ATTACK* msg) {
  return *msg->_impl_.attackpos_;
}
CS_ATTACK::CS_ATTACK(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CS_ATTACK)
}
inline PROTOBUF_NDEBUG_INLINE CS_ATTACK::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CS_ATTACK::CS_ATTACK(
    ::google::protobuf::Arena* arena,
    const CS_ATTACK& from)
    : ::google::protobuf::Message(arena) {
  CS_ATTACK* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.attackpos_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::VECTOR3>(arena, *from._impl_.attackpos_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, damage_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::damage_));

  // @@protoc_insertion_point(copy_constructor:CS_ATTACK)
}
inline PROTOBUF_NDEBUG_INLINE CS_ATTACK::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CS_ATTACK::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, attackpos_),
           0,
           offsetof(Impl_, damage_) -
               offsetof(Impl_, attackpos_) +
               sizeof(Impl_::damage_));
}
CS_ATTACK::~CS_ATTACK() {
  // @@protoc_insertion_point(destructor:CS_ATTACK)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CS_ATTACK::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.attackpos_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CS_ATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_ATTACK)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.attackpos_ != nullptr);
    _impl_.attackpos_->Clear();
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.damage_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.damage_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CS_ATTACK::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> CS_ATTACK::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CS_ATTACK, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CS_ATTACK_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CS_ATTACK, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CS_ATTACK, _impl_.id_)}},
    // .VECTOR3 attackPos = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CS_ATTACK, _impl_.attackpos_)}},
    // float damage = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(CS_ATTACK, _impl_.damage_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(CS_ATTACK, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .VECTOR3 attackPos = 2;
    {PROTOBUF_FIELD_OFFSET(CS_ATTACK, _impl_.attackpos_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float damage = 3;
    {PROTOBUF_FIELD_OFFSET(CS_ATTACK, _impl_.damage_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::VECTOR3>()},
  }}, {{
  }},
};

::uint8_t* CS_ATTACK::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_ATTACK)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .VECTOR3 attackPos = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::attackpos(this),
        _Internal::attackpos(this).GetCachedSize(), target, stream);
  }

  // float damage = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  ::uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_ATTACK)
  return target;
}

::size_t CS_ATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_ATTACK)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VECTOR3 attackPos = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.attackpos_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // float damage = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_damage = this->_internal_damage();
  ::uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CS_ATTACK::_class_data_ = {
    CS_ATTACK::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CS_ATTACK::GetClassData() const {
  return &_class_data_;
}

void CS_ATTACK::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CS_ATTACK*>(&to_msg);
  auto& from = static_cast<const CS_ATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CS_ATTACK)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_attackpos()->::VECTOR3::MergeFrom(
        from._internal_attackpos());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_damage = from._internal_damage();
  ::uint32_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CS_ATTACK::CopyFrom(const CS_ATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_ATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CS_ATTACK::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CS_ATTACK::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CS_ATTACK::InternalSwap(CS_ATTACK* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_ATTACK, _impl_.damage_)
      + sizeof(CS_ATTACK::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(CS_ATTACK, _impl_.attackpos_)>(
          reinterpret_cast<char*>(&_impl_.attackpos_),
          reinterpret_cast<char*>(&other->_impl_.attackpos_));
}

::google::protobuf::Metadata CS_ATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}
// ===================================================================

class CS_DISCONNECT::_Internal {
 public:
};

CS_DISCONNECT::CS_DISCONNECT(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CS_DISCONNECT)
}
CS_DISCONNECT::CS_DISCONNECT(
    ::google::protobuf::Arena* arena, const CS_DISCONNECT& from)
    : CS_DISCONNECT(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CS_DISCONNECT::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CS_DISCONNECT::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_ = {};
}
CS_DISCONNECT::~CS_DISCONNECT() {
  // @@protoc_insertion_point(destructor:CS_DISCONNECT)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CS_DISCONNECT::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CS_DISCONNECT::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_DISCONNECT)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CS_DISCONNECT::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> CS_DISCONNECT::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CS_DISCONNECT_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CS_DISCONNECT, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CS_DISCONNECT, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1;
    {PROTOBUF_FIELD_OFFSET(CS_DISCONNECT, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CS_DISCONNECT::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_DISCONNECT)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS_DISCONNECT)
  return target;
}

::size_t CS_DISCONNECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS_DISCONNECT)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CS_DISCONNECT::_class_data_ = {
    CS_DISCONNECT::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CS_DISCONNECT::GetClassData() const {
  return &_class_data_;
}

void CS_DISCONNECT::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CS_DISCONNECT*>(&to_msg);
  auto& from = static_cast<const CS_DISCONNECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CS_DISCONNECT)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CS_DISCONNECT::CopyFrom(const CS_DISCONNECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_DISCONNECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CS_DISCONNECT::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CS_DISCONNECT::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CS_DISCONNECT::InternalSwap(CS_DISCONNECT* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata CS_DISCONNECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
