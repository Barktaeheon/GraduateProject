// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tag.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_Tag_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Tag_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Tag_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Tag_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Tag_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum TAG_CS : int {
  TAG_CS_DUMMY = 0,
  TAG_CS_LOGIN = 1,
  TAG_CS_RESOURCE_RECEIVE_SUCCESS = 2,
  TAG_CS_MOVE = 3,
  TAG_CS_ATTACK = 4,
  TAG_CS_LOGOUT = 5,
  TAG_CS_PLAYERSTATE = 6,
  TAG_CS_CHARMOVE = 7,
  TAG_CS_PLAYERANIMSTATE = 8,
  TAG_CS_CHARCOLLISION = 9,
  TAG_CS_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TAG_CS_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TAG_CS_IsValid(int value);
extern const uint32_t TAG_CS_internal_data_[];
constexpr TAG_CS TAG_CS_MIN = static_cast<TAG_CS>(0);
constexpr TAG_CS TAG_CS_MAX = static_cast<TAG_CS>(9);
constexpr int TAG_CS_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
TAG_CS_descriptor();
template <typename T>
const std::string& TAG_CS_Name(T value) {
  static_assert(std::is_same<T, TAG_CS>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TAG_CS_Name().");
  return TAG_CS_Name(static_cast<TAG_CS>(value));
}
template <>
inline const std::string& TAG_CS_Name(TAG_CS value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TAG_CS_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool TAG_CS_Parse(absl::string_view name, TAG_CS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TAG_CS>(
      TAG_CS_descriptor(), name, value);
}
enum TAG_SC : int {
  TAG_SC_DUMMY = 0,
  TAG_SC_START_INFORMATION_SUCCESS = 1,
  TAG_SC_CONNECTSUCCESS = 2,
  TAG_SC_OTHERCLIENTLOGIN = 3,
  TAG_SC_MONSTERRESOURCEDATA = 4,
  TAG_SC_MOVEFAILED = 5,
  TAG_SC_CHARMOVE = 6,
  TAG_SC_VIEWINRANGE = 7,
  TAG_SC_PLAYERSTATE = 8,
  TAG_SC_SELFPLAYERMOVE = 9,
  TAG_SC_PLAYERANIMSTATE = 10,
  TAG_SC_MONSTERSTATEHAVEMOVE = 11,
  TAG_SC_MONSTERSTATE = 12,
  TAG_SC_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TAG_SC_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TAG_SC_IsValid(int value);
extern const uint32_t TAG_SC_internal_data_[];
constexpr TAG_SC TAG_SC_MIN = static_cast<TAG_SC>(0);
constexpr TAG_SC TAG_SC_MAX = static_cast<TAG_SC>(12);
constexpr int TAG_SC_ARRAYSIZE = 12 + 1;
const ::google::protobuf::EnumDescriptor*
TAG_SC_descriptor();
template <typename T>
const std::string& TAG_SC_Name(T value) {
  static_assert(std::is_same<T, TAG_SC>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TAG_SC_Name().");
  return TAG_SC_Name(static_cast<TAG_SC>(value));
}
template <>
inline const std::string& TAG_SC_Name(TAG_SC value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TAG_SC_descriptor,
                                                 0, 12>(
      static_cast<int>(value));
}
inline bool TAG_SC_Parse(absl::string_view name, TAG_SC* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TAG_SC>(
      TAG_SC_descriptor(), name, value);
}
enum TAG_CHAR : int {
  TAG_DUMMY = 0,
  TAG_MAINPLAYER = 1,
  TAG_OTHERPLAYER = 2,
  TAG_MUMMY = 3,
  TAG_SARCOPHAGUS_LAYING = 4,
  TAG_SARCOPHAGUS_STANDING = 5,
  TAG_CHAR_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TAG_CHAR_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TAG_CHAR_IsValid(int value);
extern const uint32_t TAG_CHAR_internal_data_[];
constexpr TAG_CHAR TAG_CHAR_MIN = static_cast<TAG_CHAR>(0);
constexpr TAG_CHAR TAG_CHAR_MAX = static_cast<TAG_CHAR>(5);
constexpr int TAG_CHAR_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
TAG_CHAR_descriptor();
template <typename T>
const std::string& TAG_CHAR_Name(T value) {
  static_assert(std::is_same<T, TAG_CHAR>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TAG_CHAR_Name().");
  return TAG_CHAR_Name(static_cast<TAG_CHAR>(value));
}
template <>
inline const std::string& TAG_CHAR_Name(TAG_CHAR value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TAG_CHAR_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool TAG_CHAR_Parse(absl::string_view name, TAG_CHAR* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TAG_CHAR>(
      TAG_CHAR_descriptor(), name, value);
}
enum TAG_PLAYERTYPE : int {
  TAG_WARRIOR = 0,
  TAG_ARCHOR = 1,
  TAG_MAGICAIN = 2,
  TAG_PLAYERTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TAG_PLAYERTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TAG_PLAYERTYPE_IsValid(int value);
extern const uint32_t TAG_PLAYERTYPE_internal_data_[];
constexpr TAG_PLAYERTYPE TAG_PLAYERTYPE_MIN = static_cast<TAG_PLAYERTYPE>(0);
constexpr TAG_PLAYERTYPE TAG_PLAYERTYPE_MAX = static_cast<TAG_PLAYERTYPE>(2);
constexpr int TAG_PLAYERTYPE_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TAG_PLAYERTYPE_descriptor();
template <typename T>
const std::string& TAG_PLAYERTYPE_Name(T value) {
  static_assert(std::is_same<T, TAG_PLAYERTYPE>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TAG_PLAYERTYPE_Name().");
  return TAG_PLAYERTYPE_Name(static_cast<TAG_PLAYERTYPE>(value));
}
template <>
inline const std::string& TAG_PLAYERTYPE_Name(TAG_PLAYERTYPE value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TAG_PLAYERTYPE_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TAG_PLAYERTYPE_Parse(absl::string_view name, TAG_PLAYERTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TAG_PLAYERTYPE>(
      TAG_PLAYERTYPE_descriptor(), name, value);
}
enum TAG_MOBANIM : int {
  TAG_MOB_DISABLE_STATE = 0,
  TAG_MOB_IDLE_STATE = 1,
  TAG_MOB_MOVE_STATE = 2,
  TAG_MOB_ATTACK_STATE = 3,
  TAG_MOB_DEATH_STATE = 4,
  TAG_MOB_HIT_STATE = 5,
  TAG_MOB_SLEEP_STATE = 6,
  TAG_MOB_AWAKE_STATE = 7,
  TAG_MOB_FIND_STATE = 8,
  TAG_MOB_FIRSTFIND_STATE = 9,
  TAG_MOB_TAUNT_STATE = 10,
  TAG_MOBANIM_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TAG_MOBANIM_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TAG_MOBANIM_IsValid(int value);
extern const uint32_t TAG_MOBANIM_internal_data_[];
constexpr TAG_MOBANIM TAG_MOBANIM_MIN = static_cast<TAG_MOBANIM>(0);
constexpr TAG_MOBANIM TAG_MOBANIM_MAX = static_cast<TAG_MOBANIM>(10);
constexpr int TAG_MOBANIM_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
TAG_MOBANIM_descriptor();
template <typename T>
const std::string& TAG_MOBANIM_Name(T value) {
  static_assert(std::is_same<T, TAG_MOBANIM>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TAG_MOBANIM_Name().");
  return TAG_MOBANIM_Name(static_cast<TAG_MOBANIM>(value));
}
template <>
inline const std::string& TAG_MOBANIM_Name(TAG_MOBANIM value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TAG_MOBANIM_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool TAG_MOBANIM_Parse(absl::string_view name, TAG_MOBANIM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TAG_MOBANIM>(
      TAG_MOBANIM_descriptor(), name, value);
}
enum TAG_COLLTYPE : int {
  TAG_COLL_HIT = 0,
  TAG_COLL_JUST = 1,
  TAG_COLLTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TAG_COLLTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TAG_COLLTYPE_IsValid(int value);
extern const uint32_t TAG_COLLTYPE_internal_data_[];
constexpr TAG_COLLTYPE TAG_COLLTYPE_MIN = static_cast<TAG_COLLTYPE>(0);
constexpr TAG_COLLTYPE TAG_COLLTYPE_MAX = static_cast<TAG_COLLTYPE>(1);
constexpr int TAG_COLLTYPE_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
TAG_COLLTYPE_descriptor();
template <typename T>
const std::string& TAG_COLLTYPE_Name(T value) {
  static_assert(std::is_same<T, TAG_COLLTYPE>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TAG_COLLTYPE_Name().");
  return TAG_COLLTYPE_Name(static_cast<TAG_COLLTYPE>(value));
}
template <>
inline const std::string& TAG_COLLTYPE_Name(TAG_COLLTYPE value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TAG_COLLTYPE_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool TAG_COLLTYPE_Parse(absl::string_view name, TAG_COLLTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TAG_COLLTYPE>(
      TAG_COLLTYPE_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::TAG_CS> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::TAG_CS>() {
  return ::TAG_CS_descriptor();
}
template <>
struct is_proto_enum<::TAG_SC> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::TAG_SC>() {
  return ::TAG_SC_descriptor();
}
template <>
struct is_proto_enum<::TAG_CHAR> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::TAG_CHAR>() {
  return ::TAG_CHAR_descriptor();
}
template <>
struct is_proto_enum<::TAG_PLAYERTYPE> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::TAG_PLAYERTYPE>() {
  return ::TAG_PLAYERTYPE_descriptor();
}
template <>
struct is_proto_enum<::TAG_MOBANIM> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::TAG_MOBANIM>() {
  return ::TAG_MOBANIM_descriptor();
}
template <>
struct is_proto_enum<::TAG_COLLTYPE> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::TAG_COLLTYPE>() {
  return ::TAG_COLLTYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Tag_2eproto_2epb_2eh
