// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Protocol_2eproto;
class CS_ATTACK;
struct CS_ATTACKDefaultTypeInternal;
extern CS_ATTACKDefaultTypeInternal _CS_ATTACK_default_instance_;
class CS_CHARSTATE;
struct CS_CHARSTATEDefaultTypeInternal;
extern CS_CHARSTATEDefaultTypeInternal _CS_CHARSTATE_default_instance_;
class CS_DISCONNECT;
struct CS_DISCONNECTDefaultTypeInternal;
extern CS_DISCONNECTDefaultTypeInternal _CS_DISCONNECT_default_instance_;
class CS_LOGIN;
struct CS_LOGINDefaultTypeInternal;
extern CS_LOGINDefaultTypeInternal _CS_LOGIN_default_instance_;
class CS_MOVE;
struct CS_MOVEDefaultTypeInternal;
extern CS_MOVEDefaultTypeInternal _CS_MOVE_default_instance_;
class EQINFO;
struct EQINFODefaultTypeInternal;
extern EQINFODefaultTypeInternal _EQINFO_default_instance_;
class SC_CHARSTATE;
struct SC_CHARSTATEDefaultTypeInternal;
extern SC_CHARSTATEDefaultTypeInternal _SC_CHARSTATE_default_instance_;
class SC_CONNECTSUCCESS;
struct SC_CONNECTSUCCESSDefaultTypeInternal;
extern SC_CONNECTSUCCESSDefaultTypeInternal _SC_CONNECTSUCCESS_default_instance_;
class SC_MOVEFAILED;
struct SC_MOVEFAILEDDefaultTypeInternal;
extern SC_MOVEFAILEDDefaultTypeInternal _SC_MOVEFAILED_default_instance_;
class SC_MOVESTATE;
struct SC_MOVESTATEDefaultTypeInternal;
extern SC_MOVESTATEDefaultTypeInternal _SC_MOVESTATE_default_instance_;
class SC_OTHERCLIENTLOGIN;
struct SC_OTHERCLIENTLOGINDefaultTypeInternal;
extern SC_OTHERCLIENTLOGINDefaultTypeInternal _SC_OTHERCLIENTLOGIN_default_instance_;
class SC_VIEWINRANGE;
struct SC_VIEWINRANGEDefaultTypeInternal;
extern SC_VIEWINRANGEDefaultTypeInternal _SC_VIEWINRANGE_default_instance_;
class VECTOR3;
struct VECTOR3DefaultTypeInternal;
extern VECTOR3DefaultTypeInternal _VECTOR3_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum Direction : int {
  UP = 0,
  DOWN = 1,
  LEFT = 2,
  RIGHT = 3,
  Direction_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Direction_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Direction_IsValid(int value);
extern const uint32_t Direction_internal_data_[];
constexpr Direction Direction_MIN = static_cast<Direction>(0);
constexpr Direction Direction_MAX = static_cast<Direction>(3);
constexpr int Direction_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Direction_descriptor();
template <typename T>
const std::string& Direction_Name(T value) {
  static_assert(std::is_same<T, Direction>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Direction_Name().");
  return Direction_Name(static_cast<Direction>(value));
}
template <>
inline const std::string& Direction_Name(Direction value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Direction_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Direction_Parse(absl::string_view name, Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Direction>(
      Direction_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class VECTOR3 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VECTOR3) */ {
 public:
  inline VECTOR3() : VECTOR3(nullptr) {}
  ~VECTOR3() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VECTOR3(::google::protobuf::internal::ConstantInitialized);

  inline VECTOR3(const VECTOR3& from)
      : VECTOR3(nullptr, from) {}
  VECTOR3(VECTOR3&& from) noexcept
    : VECTOR3() {
    *this = ::std::move(from);
  }

  inline VECTOR3& operator=(const VECTOR3& from) {
    CopyFrom(from);
    return *this;
  }
  inline VECTOR3& operator=(VECTOR3&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VECTOR3& default_instance() {
    return *internal_default_instance();
  }
  static inline const VECTOR3* internal_default_instance() {
    return reinterpret_cast<const VECTOR3*>(
               &_VECTOR3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VECTOR3& a, VECTOR3& b) {
    a.Swap(&b);
  }
  inline void Swap(VECTOR3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VECTOR3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VECTOR3* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VECTOR3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VECTOR3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VECTOR3& from) {
    VECTOR3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VECTOR3* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "VECTOR3";
  }
  protected:
  explicit VECTOR3(::google::protobuf::Arena* arena);
  VECTOR3(::google::protobuf::Arena* arena, const VECTOR3& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:VECTOR3)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float x_;
    float y_;
    float z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class SC_OTHERCLIENTLOGIN final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_OTHERCLIENTLOGIN) */ {
 public:
  inline SC_OTHERCLIENTLOGIN() : SC_OTHERCLIENTLOGIN(nullptr) {}
  ~SC_OTHERCLIENTLOGIN() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SC_OTHERCLIENTLOGIN(::google::protobuf::internal::ConstantInitialized);

  inline SC_OTHERCLIENTLOGIN(const SC_OTHERCLIENTLOGIN& from)
      : SC_OTHERCLIENTLOGIN(nullptr, from) {}
  SC_OTHERCLIENTLOGIN(SC_OTHERCLIENTLOGIN&& from) noexcept
    : SC_OTHERCLIENTLOGIN() {
    *this = ::std::move(from);
  }

  inline SC_OTHERCLIENTLOGIN& operator=(const SC_OTHERCLIENTLOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_OTHERCLIENTLOGIN& operator=(SC_OTHERCLIENTLOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_OTHERCLIENTLOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_OTHERCLIENTLOGIN* internal_default_instance() {
    return reinterpret_cast<const SC_OTHERCLIENTLOGIN*>(
               &_SC_OTHERCLIENTLOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SC_OTHERCLIENTLOGIN& a, SC_OTHERCLIENTLOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_OTHERCLIENTLOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_OTHERCLIENTLOGIN* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_OTHERCLIENTLOGIN* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_OTHERCLIENTLOGIN>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_OTHERCLIENTLOGIN& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SC_OTHERCLIENTLOGIN& from) {
    SC_OTHERCLIENTLOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SC_OTHERCLIENTLOGIN* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SC_OTHERCLIENTLOGIN";
  }
  protected:
  explicit SC_OTHERCLIENTLOGIN(::google::protobuf::Arena* arena);
  SC_OTHERCLIENTLOGIN(::google::protobuf::Arena* arena, const SC_OTHERCLIENTLOGIN& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCellIndexFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int64 cellIndex = 2;
  void clear_cellindex() ;
  ::int64_t cellindex() const;
  void set_cellindex(::int64_t value);

  private:
  ::int64_t _internal_cellindex() const;
  void _internal_set_cellindex(::int64_t value);

  public:
  // int64 type = 3;
  void clear_type() ;
  ::int64_t type() const;
  void set_type(::int64_t value);

  private:
  ::int64_t _internal_type() const;
  void _internal_set_type(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:SC_OTHERCLIENTLOGIN)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t id_;
    ::int64_t cellindex_;
    ::int64_t type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class SC_CONNECTSUCCESS final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_CONNECTSUCCESS) */ {
 public:
  inline SC_CONNECTSUCCESS() : SC_CONNECTSUCCESS(nullptr) {}
  ~SC_CONNECTSUCCESS() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SC_CONNECTSUCCESS(::google::protobuf::internal::ConstantInitialized);

  inline SC_CONNECTSUCCESS(const SC_CONNECTSUCCESS& from)
      : SC_CONNECTSUCCESS(nullptr, from) {}
  SC_CONNECTSUCCESS(SC_CONNECTSUCCESS&& from) noexcept
    : SC_CONNECTSUCCESS() {
    *this = ::std::move(from);
  }

  inline SC_CONNECTSUCCESS& operator=(const SC_CONNECTSUCCESS& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CONNECTSUCCESS& operator=(SC_CONNECTSUCCESS&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_CONNECTSUCCESS& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_CONNECTSUCCESS* internal_default_instance() {
    return reinterpret_cast<const SC_CONNECTSUCCESS*>(
               &_SC_CONNECTSUCCESS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SC_CONNECTSUCCESS& a, SC_CONNECTSUCCESS& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CONNECTSUCCESS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_CONNECTSUCCESS* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_CONNECTSUCCESS* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_CONNECTSUCCESS>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_CONNECTSUCCESS& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SC_CONNECTSUCCESS& from) {
    SC_CONNECTSUCCESS::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SC_CONNECTSUCCESS* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SC_CONNECTSUCCESS";
  }
  protected:
  explicit SC_CONNECTSUCCESS(::google::protobuf::Arena* arena);
  SC_CONNECTSUCCESS(::google::protobuf::Arena* arena, const SC_CONNECTSUCCESS& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCellIndexFieldNumber = 2,
    kTypeFieldNumber = 4,
  };
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int64 cellIndex = 2;
  void clear_cellindex() ;
  ::int64_t cellindex() const;
  void set_cellindex(::int64_t value);

  private:
  ::int64_t _internal_cellindex() const;
  void _internal_set_cellindex(::int64_t value);

  public:
  // int64 type = 4;
  void clear_type() ;
  ::int64_t type() const;
  void set_type(::int64_t value);

  private:
  ::int64_t _internal_type() const;
  void _internal_set_type(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:SC_CONNECTSUCCESS)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t id_;
    ::int64_t cellindex_;
    ::int64_t type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class SC_CHARSTATE final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_CHARSTATE) */ {
 public:
  inline SC_CHARSTATE() : SC_CHARSTATE(nullptr) {}
  ~SC_CHARSTATE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SC_CHARSTATE(::google::protobuf::internal::ConstantInitialized);

  inline SC_CHARSTATE(const SC_CHARSTATE& from)
      : SC_CHARSTATE(nullptr, from) {}
  SC_CHARSTATE(SC_CHARSTATE&& from) noexcept
    : SC_CHARSTATE() {
    *this = ::std::move(from);
  }

  inline SC_CHARSTATE& operator=(const SC_CHARSTATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CHARSTATE& operator=(SC_CHARSTATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_CHARSTATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_CHARSTATE* internal_default_instance() {
    return reinterpret_cast<const SC_CHARSTATE*>(
               &_SC_CHARSTATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SC_CHARSTATE& a, SC_CHARSTATE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CHARSTATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_CHARSTATE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_CHARSTATE* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_CHARSTATE>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_CHARSTATE& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SC_CHARSTATE& from) {
    SC_CHARSTATE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SC_CHARSTATE* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SC_CHARSTATE";
  }
  protected:
  explicit SC_CHARSTATE(::google::protobuf::Arena* arena);
  SC_CHARSTATE(::google::protobuf::Arena* arena, const SC_CHARSTATE& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerFieldNumber = 3,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string trigger = 3;
  void clear_trigger() ;
  const std::string& trigger() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trigger(Arg_&& arg, Args_... args);
  std::string* mutable_trigger();
  PROTOBUF_NODISCARD std::string* release_trigger();
  void set_allocated_trigger(std::string* value);

  private:
  const std::string& _internal_trigger() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trigger(
      const std::string& value);
  std::string* _internal_mutable_trigger();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int64 type = 2;
  void clear_type() ;
  ::int64_t type() const;
  void set_type(::int64_t value);

  private:
  ::int64_t _internal_type() const;
  void _internal_set_type(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:SC_CHARSTATE)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      28, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr trigger_;
    ::int64_t id_;
    ::int64_t type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class EQINFO final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EQINFO) */ {
 public:
  inline EQINFO() : EQINFO(nullptr) {}
  ~EQINFO() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EQINFO(::google::protobuf::internal::ConstantInitialized);

  inline EQINFO(const EQINFO& from)
      : EQINFO(nullptr, from) {}
  EQINFO(EQINFO&& from) noexcept
    : EQINFO() {
    *this = ::std::move(from);
  }

  inline EQINFO& operator=(const EQINFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline EQINFO& operator=(EQINFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EQINFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const EQINFO* internal_default_instance() {
    return reinterpret_cast<const EQINFO*>(
               &_EQINFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EQINFO& a, EQINFO& b) {
    a.Swap(&b);
  }
  inline void Swap(EQINFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EQINFO* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EQINFO* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EQINFO>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EQINFO& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EQINFO& from) {
    EQINFO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EQINFO* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EQINFO";
  }
  protected:
  explicit EQINFO(::google::protobuf::Arena* arena);
  EQINFO(::google::protobuf::Arena* arena, const EQINFO& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 1,
    kIncreasePowerFieldNumber = 2,
    kIncreaseDefensiveFieldNumber = 3,
    kIncreaseHpFieldNumber = 4,
  };
  // float gold = 1;
  void clear_gold() ;
  float gold() const;
  void set_gold(float value);

  private:
  float _internal_gold() const;
  void _internal_set_gold(float value);

  public:
  // float increasePower = 2;
  void clear_increasepower() ;
  float increasepower() const;
  void set_increasepower(float value);

  private:
  float _internal_increasepower() const;
  void _internal_set_increasepower(float value);

  public:
  // float increaseDefensive = 3;
  void clear_increasedefensive() ;
  float increasedefensive() const;
  void set_increasedefensive(float value);

  private:
  float _internal_increasedefensive() const;
  void _internal_set_increasedefensive(float value);

  public:
  // float increaseHp = 4;
  void clear_increasehp() ;
  float increasehp() const;
  void set_increasehp(float value);

  private:
  float _internal_increasehp() const;
  void _internal_set_increasehp(float value);

  public:
  // @@protoc_insertion_point(class_scope:EQINFO)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float gold_;
    float increasepower_;
    float increasedefensive_;
    float increasehp_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class CS_LOGIN final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_LOGIN) */ {
 public:
  inline CS_LOGIN() : CS_LOGIN(nullptr) {}
  ~CS_LOGIN() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CS_LOGIN(::google::protobuf::internal::ConstantInitialized);

  inline CS_LOGIN(const CS_LOGIN& from)
      : CS_LOGIN(nullptr, from) {}
  CS_LOGIN(CS_LOGIN&& from) noexcept
    : CS_LOGIN() {
    *this = ::std::move(from);
  }

  inline CS_LOGIN& operator=(const CS_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_LOGIN& operator=(CS_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_LOGIN* internal_default_instance() {
    return reinterpret_cast<const CS_LOGIN*>(
               &_CS_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CS_LOGIN& a, CS_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_LOGIN* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_LOGIN* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_LOGIN>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_LOGIN& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CS_LOGIN& from) {
    CS_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CS_LOGIN* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CS_LOGIN";
  }
  protected:
  explicit CS_LOGIN(::google::protobuf::Arena* arena);
  CS_LOGIN(::google::protobuf::Arena* arena, const CS_LOGIN& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:CS_LOGIN)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class CS_DISCONNECT final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_DISCONNECT) */ {
 public:
  inline CS_DISCONNECT() : CS_DISCONNECT(nullptr) {}
  ~CS_DISCONNECT() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CS_DISCONNECT(::google::protobuf::internal::ConstantInitialized);

  inline CS_DISCONNECT(const CS_DISCONNECT& from)
      : CS_DISCONNECT(nullptr, from) {}
  CS_DISCONNECT(CS_DISCONNECT&& from) noexcept
    : CS_DISCONNECT() {
    *this = ::std::move(from);
  }

  inline CS_DISCONNECT& operator=(const CS_DISCONNECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_DISCONNECT& operator=(CS_DISCONNECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_DISCONNECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_DISCONNECT* internal_default_instance() {
    return reinterpret_cast<const CS_DISCONNECT*>(
               &_CS_DISCONNECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CS_DISCONNECT& a, CS_DISCONNECT& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_DISCONNECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_DISCONNECT* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_DISCONNECT* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_DISCONNECT>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_DISCONNECT& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CS_DISCONNECT& from) {
    CS_DISCONNECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CS_DISCONNECT* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CS_DISCONNECT";
  }
  protected:
  explicit CS_DISCONNECT(::google::protobuf::Arena* arena);
  CS_DISCONNECT(::google::protobuf::Arena* arena, const CS_DISCONNECT& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:CS_DISCONNECT)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class CS_CHARSTATE final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_CHARSTATE) */ {
 public:
  inline CS_CHARSTATE() : CS_CHARSTATE(nullptr) {}
  ~CS_CHARSTATE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CS_CHARSTATE(::google::protobuf::internal::ConstantInitialized);

  inline CS_CHARSTATE(const CS_CHARSTATE& from)
      : CS_CHARSTATE(nullptr, from) {}
  CS_CHARSTATE(CS_CHARSTATE&& from) noexcept
    : CS_CHARSTATE() {
    *this = ::std::move(from);
  }

  inline CS_CHARSTATE& operator=(const CS_CHARSTATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_CHARSTATE& operator=(CS_CHARSTATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_CHARSTATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_CHARSTATE* internal_default_instance() {
    return reinterpret_cast<const CS_CHARSTATE*>(
               &_CS_CHARSTATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CS_CHARSTATE& a, CS_CHARSTATE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_CHARSTATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_CHARSTATE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_CHARSTATE* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_CHARSTATE>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_CHARSTATE& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CS_CHARSTATE& from) {
    CS_CHARSTATE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CS_CHARSTATE* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CS_CHARSTATE";
  }
  protected:
  explicit CS_CHARSTATE(::google::protobuf::Arena* arena);
  CS_CHARSTATE(::google::protobuf::Arena* arena, const CS_CHARSTATE& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerFieldNumber = 3,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string trigger = 3;
  void clear_trigger() ;
  const std::string& trigger() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trigger(Arg_&& arg, Args_... args);
  std::string* mutable_trigger();
  PROTOBUF_NODISCARD std::string* release_trigger();
  void set_allocated_trigger(std::string* value);

  private:
  const std::string& _internal_trigger() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trigger(
      const std::string& value);
  std::string* _internal_mutable_trigger();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int64 type = 2;
  void clear_type() ;
  ::int64_t type() const;
  void set_type(::int64_t value);

  private:
  ::int64_t _internal_type() const;
  void _internal_set_type(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:CS_CHARSTATE)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      28, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr trigger_;
    ::int64_t id_;
    ::int64_t type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class SC_VIEWINRANGE final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_VIEWINRANGE) */ {
 public:
  inline SC_VIEWINRANGE() : SC_VIEWINRANGE(nullptr) {}
  ~SC_VIEWINRANGE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SC_VIEWINRANGE(::google::protobuf::internal::ConstantInitialized);

  inline SC_VIEWINRANGE(const SC_VIEWINRANGE& from)
      : SC_VIEWINRANGE(nullptr, from) {}
  SC_VIEWINRANGE(SC_VIEWINRANGE&& from) noexcept
    : SC_VIEWINRANGE() {
    *this = ::std::move(from);
  }

  inline SC_VIEWINRANGE& operator=(const SC_VIEWINRANGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_VIEWINRANGE& operator=(SC_VIEWINRANGE&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_VIEWINRANGE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_VIEWINRANGE* internal_default_instance() {
    return reinterpret_cast<const SC_VIEWINRANGE*>(
               &_SC_VIEWINRANGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SC_VIEWINRANGE& a, SC_VIEWINRANGE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_VIEWINRANGE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_VIEWINRANGE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_VIEWINRANGE* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_VIEWINRANGE>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_VIEWINRANGE& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SC_VIEWINRANGE& from) {
    SC_VIEWINRANGE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SC_VIEWINRANGE* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SC_VIEWINRANGE";
  }
  protected:
  explicit SC_VIEWINRANGE(::google::protobuf::Arena* arena);
  SC_VIEWINRANGE(::google::protobuf::Arena* arena, const SC_VIEWINRANGE& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kIdFieldNumber = 1,
    kCellindexFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // .VECTOR3 position = 2;
  bool has_position() const;
  void clear_position() ;
  const ::VECTOR3& position() const;
  PROTOBUF_NODISCARD ::VECTOR3* release_position();
  ::VECTOR3* mutable_position();
  void set_allocated_position(::VECTOR3* value);
  void unsafe_arena_set_allocated_position(::VECTOR3* value);
  ::VECTOR3* unsafe_arena_release_position();

  private:
  const ::VECTOR3& _internal_position() const;
  ::VECTOR3* _internal_mutable_position();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int64 cellindex = 3;
  void clear_cellindex() ;
  ::int64_t cellindex() const;
  void set_cellindex(::int64_t value);

  private:
  ::int64_t _internal_cellindex() const;
  void _internal_set_cellindex(::int64_t value);

  public:
  // int64 type = 4;
  void clear_type() ;
  ::int64_t type() const;
  void set_type(::int64_t value);

  private:
  ::int64_t _internal_type() const;
  void _internal_set_type(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:SC_VIEWINRANGE)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::VECTOR3* position_;
    ::int64_t id_;
    ::int64_t cellindex_;
    ::int64_t type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class SC_MOVESTATE final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_MOVESTATE) */ {
 public:
  inline SC_MOVESTATE() : SC_MOVESTATE(nullptr) {}
  ~SC_MOVESTATE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SC_MOVESTATE(::google::protobuf::internal::ConstantInitialized);

  inline SC_MOVESTATE(const SC_MOVESTATE& from)
      : SC_MOVESTATE(nullptr, from) {}
  SC_MOVESTATE(SC_MOVESTATE&& from) noexcept
    : SC_MOVESTATE() {
    *this = ::std::move(from);
  }

  inline SC_MOVESTATE& operator=(const SC_MOVESTATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_MOVESTATE& operator=(SC_MOVESTATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_MOVESTATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_MOVESTATE* internal_default_instance() {
    return reinterpret_cast<const SC_MOVESTATE*>(
               &_SC_MOVESTATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SC_MOVESTATE& a, SC_MOVESTATE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_MOVESTATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_MOVESTATE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_MOVESTATE* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_MOVESTATE>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_MOVESTATE& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SC_MOVESTATE& from) {
    SC_MOVESTATE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SC_MOVESTATE* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SC_MOVESTATE";
  }
  protected:
  explicit SC_MOVESTATE(::google::protobuf::Arena* arena);
  SC_MOVESTATE(::google::protobuf::Arena* arena, const SC_MOVESTATE& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovePosFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .VECTOR3 movePos = 2;
  bool has_movepos() const;
  void clear_movepos() ;
  const ::VECTOR3& movepos() const;
  PROTOBUF_NODISCARD ::VECTOR3* release_movepos();
  ::VECTOR3* mutable_movepos();
  void set_allocated_movepos(::VECTOR3* value);
  void unsafe_arena_set_allocated_movepos(::VECTOR3* value);
  ::VECTOR3* unsafe_arena_release_movepos();

  private:
  const ::VECTOR3& _internal_movepos() const;
  ::VECTOR3* _internal_mutable_movepos();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:SC_MOVESTATE)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::VECTOR3* movepos_;
    ::int64_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class SC_MOVEFAILED final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC_MOVEFAILED) */ {
 public:
  inline SC_MOVEFAILED() : SC_MOVEFAILED(nullptr) {}
  ~SC_MOVEFAILED() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SC_MOVEFAILED(::google::protobuf::internal::ConstantInitialized);

  inline SC_MOVEFAILED(const SC_MOVEFAILED& from)
      : SC_MOVEFAILED(nullptr, from) {}
  SC_MOVEFAILED(SC_MOVEFAILED&& from) noexcept
    : SC_MOVEFAILED() {
    *this = ::std::move(from);
  }

  inline SC_MOVEFAILED& operator=(const SC_MOVEFAILED& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_MOVEFAILED& operator=(SC_MOVEFAILED&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_MOVEFAILED& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_MOVEFAILED* internal_default_instance() {
    return reinterpret_cast<const SC_MOVEFAILED*>(
               &_SC_MOVEFAILED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SC_MOVEFAILED& a, SC_MOVEFAILED& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_MOVEFAILED* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_MOVEFAILED* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_MOVEFAILED* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_MOVEFAILED>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SC_MOVEFAILED& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SC_MOVEFAILED& from) {
    SC_MOVEFAILED::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SC_MOVEFAILED* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "SC_MOVEFAILED";
  }
  protected:
  explicit SC_MOVEFAILED(::google::protobuf::Arena* arena);
  SC_MOVEFAILED(::google::protobuf::Arena* arena, const SC_MOVEFAILED& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevPosFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // .VECTOR3 prevPos = 3;
  bool has_prevpos() const;
  void clear_prevpos() ;
  const ::VECTOR3& prevpos() const;
  PROTOBUF_NODISCARD ::VECTOR3* release_prevpos();
  ::VECTOR3* mutable_prevpos();
  void set_allocated_prevpos(::VECTOR3* value);
  void unsafe_arena_set_allocated_prevpos(::VECTOR3* value);
  ::VECTOR3* unsafe_arena_release_prevpos();

  private:
  const ::VECTOR3& _internal_prevpos() const;
  ::VECTOR3* _internal_mutable_prevpos();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:SC_MOVEFAILED)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::VECTOR3* prevpos_;
    ::int64_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class CS_MOVE final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_MOVE) */ {
 public:
  inline CS_MOVE() : CS_MOVE(nullptr) {}
  ~CS_MOVE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CS_MOVE(::google::protobuf::internal::ConstantInitialized);

  inline CS_MOVE(const CS_MOVE& from)
      : CS_MOVE(nullptr, from) {}
  CS_MOVE(CS_MOVE&& from) noexcept
    : CS_MOVE() {
    *this = ::std::move(from);
  }

  inline CS_MOVE& operator=(const CS_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_MOVE& operator=(CS_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_MOVE* internal_default_instance() {
    return reinterpret_cast<const CS_MOVE*>(
               &_CS_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CS_MOVE& a, CS_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_MOVE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_MOVE* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_MOVE>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_MOVE& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CS_MOVE& from) {
    CS_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CS_MOVE* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CS_MOVE";
  }
  protected:
  explicit CS_MOVE(::google::protobuf::Arena* arena);
  CS_MOVE(::google::protobuf::Arena* arena, const CS_MOVE& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovePosFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .VECTOR3 movePos = 2;
  bool has_movepos() const;
  void clear_movepos() ;
  const ::VECTOR3& movepos() const;
  PROTOBUF_NODISCARD ::VECTOR3* release_movepos();
  ::VECTOR3* mutable_movepos();
  void set_allocated_movepos(::VECTOR3* value);
  void unsafe_arena_set_allocated_movepos(::VECTOR3* value);
  ::VECTOR3* unsafe_arena_release_movepos();

  private:
  const ::VECTOR3& _internal_movepos() const;
  ::VECTOR3* _internal_mutable_movepos();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:CS_MOVE)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::VECTOR3* movepos_;
    ::int64_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class CS_ATTACK final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CS_ATTACK) */ {
 public:
  inline CS_ATTACK() : CS_ATTACK(nullptr) {}
  ~CS_ATTACK() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CS_ATTACK(::google::protobuf::internal::ConstantInitialized);

  inline CS_ATTACK(const CS_ATTACK& from)
      : CS_ATTACK(nullptr, from) {}
  CS_ATTACK(CS_ATTACK&& from) noexcept
    : CS_ATTACK() {
    *this = ::std::move(from);
  }

  inline CS_ATTACK& operator=(const CS_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ATTACK& operator=(CS_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_ATTACK* internal_default_instance() {
    return reinterpret_cast<const CS_ATTACK*>(
               &_CS_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CS_ATTACK& a, CS_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ATTACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_ATTACK* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_ATTACK* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_ATTACK>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CS_ATTACK& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CS_ATTACK& from) {
    CS_ATTACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CS_ATTACK* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CS_ATTACK";
  }
  protected:
  explicit CS_ATTACK(::google::protobuf::Arena* arena);
  CS_ATTACK(::google::protobuf::Arena* arena, const CS_ATTACK& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackPosFieldNumber = 2,
    kIdFieldNumber = 1,
    kDamageFieldNumber = 3,
  };
  // .VECTOR3 attackPos = 2;
  bool has_attackpos() const;
  void clear_attackpos() ;
  const ::VECTOR3& attackpos() const;
  PROTOBUF_NODISCARD ::VECTOR3* release_attackpos();
  ::VECTOR3* mutable_attackpos();
  void set_allocated_attackpos(::VECTOR3* value);
  void unsafe_arena_set_allocated_attackpos(::VECTOR3* value);
  ::VECTOR3* unsafe_arena_release_attackpos();

  private:
  const ::VECTOR3& _internal_attackpos() const;
  ::VECTOR3* _internal_mutable_attackpos();

  public:
  // int64 id = 1;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // float damage = 3;
  void clear_damage() ;
  float damage() const;
  void set_damage(float value);

  private:
  float _internal_damage() const;
  void _internal_set_damage(float value);

  public:
  // @@protoc_insertion_point(class_scope:CS_ATTACK)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::VECTOR3* attackpos_;
    ::int64_t id_;
    float damage_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VECTOR3

// float x = 1;
inline void VECTOR3::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline float VECTOR3::x() const {
  // @@protoc_insertion_point(field_get:VECTOR3.x)
  return _internal_x();
}
inline void VECTOR3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:VECTOR3.x)
}
inline float VECTOR3::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void VECTOR3::_internal_set_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// float y = 2;
inline void VECTOR3::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline float VECTOR3::y() const {
  // @@protoc_insertion_point(field_get:VECTOR3.y)
  return _internal_y();
}
inline void VECTOR3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:VECTOR3.y)
}
inline float VECTOR3::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void VECTOR3::_internal_set_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// float z = 3;
inline void VECTOR3::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = 0;
}
inline float VECTOR3::z() const {
  // @@protoc_insertion_point(field_get:VECTOR3.z)
  return _internal_z();
}
inline void VECTOR3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:VECTOR3.z)
}
inline float VECTOR3::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void VECTOR3::_internal_set_z(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// EQINFO

// float gold = 1;
inline void EQINFO::clear_gold() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gold_ = 0;
}
inline float EQINFO::gold() const {
  // @@protoc_insertion_point(field_get:EQINFO.gold)
  return _internal_gold();
}
inline void EQINFO::set_gold(float value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:EQINFO.gold)
}
inline float EQINFO::_internal_gold() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gold_;
}
inline void EQINFO::_internal_set_gold(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gold_ = value;
}

// float increasePower = 2;
inline void EQINFO::clear_increasepower() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.increasepower_ = 0;
}
inline float EQINFO::increasepower() const {
  // @@protoc_insertion_point(field_get:EQINFO.increasePower)
  return _internal_increasepower();
}
inline void EQINFO::set_increasepower(float value) {
  _internal_set_increasepower(value);
  // @@protoc_insertion_point(field_set:EQINFO.increasePower)
}
inline float EQINFO::_internal_increasepower() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.increasepower_;
}
inline void EQINFO::_internal_set_increasepower(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.increasepower_ = value;
}

// float increaseDefensive = 3;
inline void EQINFO::clear_increasedefensive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.increasedefensive_ = 0;
}
inline float EQINFO::increasedefensive() const {
  // @@protoc_insertion_point(field_get:EQINFO.increaseDefensive)
  return _internal_increasedefensive();
}
inline void EQINFO::set_increasedefensive(float value) {
  _internal_set_increasedefensive(value);
  // @@protoc_insertion_point(field_set:EQINFO.increaseDefensive)
}
inline float EQINFO::_internal_increasedefensive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.increasedefensive_;
}
inline void EQINFO::_internal_set_increasedefensive(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.increasedefensive_ = value;
}

// float increaseHp = 4;
inline void EQINFO::clear_increasehp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.increasehp_ = 0;
}
inline float EQINFO::increasehp() const {
  // @@protoc_insertion_point(field_get:EQINFO.increaseHp)
  return _internal_increasehp();
}
inline void EQINFO::set_increasehp(float value) {
  _internal_set_increasehp(value);
  // @@protoc_insertion_point(field_set:EQINFO.increaseHp)
}
inline float EQINFO::_internal_increasehp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.increasehp_;
}
inline void EQINFO::_internal_set_increasehp(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.increasehp_ = value;
}

// -------------------------------------------------------------------

// SC_CONNECTSUCCESS

// int64 id = 1;
inline void SC_CONNECTSUCCESS::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t SC_CONNECTSUCCESS::id() const {
  // @@protoc_insertion_point(field_get:SC_CONNECTSUCCESS.id)
  return _internal_id();
}
inline void SC_CONNECTSUCCESS::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SC_CONNECTSUCCESS.id)
}
inline ::int64_t SC_CONNECTSUCCESS::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void SC_CONNECTSUCCESS::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int64 cellIndex = 2;
inline void SC_CONNECTSUCCESS::clear_cellindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cellindex_ = ::int64_t{0};
}
inline ::int64_t SC_CONNECTSUCCESS::cellindex() const {
  // @@protoc_insertion_point(field_get:SC_CONNECTSUCCESS.cellIndex)
  return _internal_cellindex();
}
inline void SC_CONNECTSUCCESS::set_cellindex(::int64_t value) {
  _internal_set_cellindex(value);
  // @@protoc_insertion_point(field_set:SC_CONNECTSUCCESS.cellIndex)
}
inline ::int64_t SC_CONNECTSUCCESS::_internal_cellindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cellindex_;
}
inline void SC_CONNECTSUCCESS::_internal_set_cellindex(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cellindex_ = value;
}

// int64 type = 4;
inline void SC_CONNECTSUCCESS::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = ::int64_t{0};
}
inline ::int64_t SC_CONNECTSUCCESS::type() const {
  // @@protoc_insertion_point(field_get:SC_CONNECTSUCCESS.type)
  return _internal_type();
}
inline void SC_CONNECTSUCCESS::set_type(::int64_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SC_CONNECTSUCCESS.type)
}
inline ::int64_t SC_CONNECTSUCCESS::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void SC_CONNECTSUCCESS::_internal_set_type(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// SC_OTHERCLIENTLOGIN

// int64 id = 1;
inline void SC_OTHERCLIENTLOGIN::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t SC_OTHERCLIENTLOGIN::id() const {
  // @@protoc_insertion_point(field_get:SC_OTHERCLIENTLOGIN.id)
  return _internal_id();
}
inline void SC_OTHERCLIENTLOGIN::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SC_OTHERCLIENTLOGIN.id)
}
inline ::int64_t SC_OTHERCLIENTLOGIN::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void SC_OTHERCLIENTLOGIN::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int64 cellIndex = 2;
inline void SC_OTHERCLIENTLOGIN::clear_cellindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cellindex_ = ::int64_t{0};
}
inline ::int64_t SC_OTHERCLIENTLOGIN::cellindex() const {
  // @@protoc_insertion_point(field_get:SC_OTHERCLIENTLOGIN.cellIndex)
  return _internal_cellindex();
}
inline void SC_OTHERCLIENTLOGIN::set_cellindex(::int64_t value) {
  _internal_set_cellindex(value);
  // @@protoc_insertion_point(field_set:SC_OTHERCLIENTLOGIN.cellIndex)
}
inline ::int64_t SC_OTHERCLIENTLOGIN::_internal_cellindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cellindex_;
}
inline void SC_OTHERCLIENTLOGIN::_internal_set_cellindex(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cellindex_ = value;
}

// int64 type = 3;
inline void SC_OTHERCLIENTLOGIN::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = ::int64_t{0};
}
inline ::int64_t SC_OTHERCLIENTLOGIN::type() const {
  // @@protoc_insertion_point(field_get:SC_OTHERCLIENTLOGIN.type)
  return _internal_type();
}
inline void SC_OTHERCLIENTLOGIN::set_type(::int64_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SC_OTHERCLIENTLOGIN.type)
}
inline ::int64_t SC_OTHERCLIENTLOGIN::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void SC_OTHERCLIENTLOGIN::_internal_set_type(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// SC_MOVEFAILED

// int64 id = 1;
inline void SC_MOVEFAILED::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t SC_MOVEFAILED::id() const {
  // @@protoc_insertion_point(field_get:SC_MOVEFAILED.id)
  return _internal_id();
}
inline void SC_MOVEFAILED::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SC_MOVEFAILED.id)
}
inline ::int64_t SC_MOVEFAILED::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void SC_MOVEFAILED::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .VECTOR3 prevPos = 3;
inline bool SC_MOVEFAILED::has_prevpos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prevpos_ != nullptr);
  return value;
}
inline void SC_MOVEFAILED::clear_prevpos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.prevpos_ != nullptr) _impl_.prevpos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::VECTOR3& SC_MOVEFAILED::_internal_prevpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::VECTOR3* p = _impl_.prevpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::VECTOR3&>(::_VECTOR3_default_instance_);
}
inline const ::VECTOR3& SC_MOVEFAILED::prevpos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SC_MOVEFAILED.prevPos)
  return _internal_prevpos();
}
inline void SC_MOVEFAILED::unsafe_arena_set_allocated_prevpos(::VECTOR3* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.prevpos_);
  }
  _impl_.prevpos_ = reinterpret_cast<::VECTOR3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC_MOVEFAILED.prevPos)
}
inline ::VECTOR3* SC_MOVEFAILED::release_prevpos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::VECTOR3* released = _impl_.prevpos_;
  _impl_.prevpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::VECTOR3* SC_MOVEFAILED::unsafe_arena_release_prevpos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SC_MOVEFAILED.prevPos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::VECTOR3* temp = _impl_.prevpos_;
  _impl_.prevpos_ = nullptr;
  return temp;
}
inline ::VECTOR3* SC_MOVEFAILED::_internal_mutable_prevpos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.prevpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::VECTOR3>(GetArena());
    _impl_.prevpos_ = reinterpret_cast<::VECTOR3*>(p);
  }
  return _impl_.prevpos_;
}
inline ::VECTOR3* SC_MOVEFAILED::mutable_prevpos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::VECTOR3* _msg = _internal_mutable_prevpos();
  // @@protoc_insertion_point(field_mutable:SC_MOVEFAILED.prevPos)
  return _msg;
}
inline void SC_MOVEFAILED::set_allocated_prevpos(::VECTOR3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::VECTOR3*>(_impl_.prevpos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::VECTOR3*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.prevpos_ = reinterpret_cast<::VECTOR3*>(value);
  // @@protoc_insertion_point(field_set_allocated:SC_MOVEFAILED.prevPos)
}

// -------------------------------------------------------------------

// SC_CHARSTATE

// int64 id = 1;
inline void SC_CHARSTATE::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t SC_CHARSTATE::id() const {
  // @@protoc_insertion_point(field_get:SC_CHARSTATE.id)
  return _internal_id();
}
inline void SC_CHARSTATE::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SC_CHARSTATE.id)
}
inline ::int64_t SC_CHARSTATE::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void SC_CHARSTATE::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int64 type = 2;
inline void SC_CHARSTATE::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = ::int64_t{0};
}
inline ::int64_t SC_CHARSTATE::type() const {
  // @@protoc_insertion_point(field_get:SC_CHARSTATE.type)
  return _internal_type();
}
inline void SC_CHARSTATE::set_type(::int64_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SC_CHARSTATE.type)
}
inline ::int64_t SC_CHARSTATE::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void SC_CHARSTATE::_internal_set_type(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string trigger = 3;
inline void SC_CHARSTATE::clear_trigger() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trigger_.ClearToEmpty();
}
inline const std::string& SC_CHARSTATE::trigger() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SC_CHARSTATE.trigger)
  return _internal_trigger();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SC_CHARSTATE::set_trigger(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trigger_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SC_CHARSTATE.trigger)
}
inline std::string* SC_CHARSTATE::mutable_trigger() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trigger();
  // @@protoc_insertion_point(field_mutable:SC_CHARSTATE.trigger)
  return _s;
}
inline const std::string& SC_CHARSTATE::_internal_trigger() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trigger_.Get();
}
inline void SC_CHARSTATE::_internal_set_trigger(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trigger_.Set(value, GetArena());
}
inline std::string* SC_CHARSTATE::_internal_mutable_trigger() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.trigger_.Mutable( GetArena());
}
inline std::string* SC_CHARSTATE::release_trigger() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SC_CHARSTATE.trigger)
  return _impl_.trigger_.Release();
}
inline void SC_CHARSTATE::set_allocated_trigger(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trigger_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trigger_.IsDefault()) {
          _impl_.trigger_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SC_CHARSTATE.trigger)
}

// -------------------------------------------------------------------

// SC_MOVESTATE

// int64 id = 1;
inline void SC_MOVESTATE::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t SC_MOVESTATE::id() const {
  // @@protoc_insertion_point(field_get:SC_MOVESTATE.id)
  return _internal_id();
}
inline void SC_MOVESTATE::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SC_MOVESTATE.id)
}
inline ::int64_t SC_MOVESTATE::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void SC_MOVESTATE::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .VECTOR3 movePos = 2;
inline bool SC_MOVESTATE::has_movepos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.movepos_ != nullptr);
  return value;
}
inline void SC_MOVESTATE::clear_movepos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.movepos_ != nullptr) _impl_.movepos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::VECTOR3& SC_MOVESTATE::_internal_movepos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::VECTOR3* p = _impl_.movepos_;
  return p != nullptr ? *p : reinterpret_cast<const ::VECTOR3&>(::_VECTOR3_default_instance_);
}
inline const ::VECTOR3& SC_MOVESTATE::movepos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SC_MOVESTATE.movePos)
  return _internal_movepos();
}
inline void SC_MOVESTATE::unsafe_arena_set_allocated_movepos(::VECTOR3* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.movepos_);
  }
  _impl_.movepos_ = reinterpret_cast<::VECTOR3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC_MOVESTATE.movePos)
}
inline ::VECTOR3* SC_MOVESTATE::release_movepos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::VECTOR3* released = _impl_.movepos_;
  _impl_.movepos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::VECTOR3* SC_MOVESTATE::unsafe_arena_release_movepos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SC_MOVESTATE.movePos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::VECTOR3* temp = _impl_.movepos_;
  _impl_.movepos_ = nullptr;
  return temp;
}
inline ::VECTOR3* SC_MOVESTATE::_internal_mutable_movepos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.movepos_ == nullptr) {
    auto* p = CreateMaybeMessage<::VECTOR3>(GetArena());
    _impl_.movepos_ = reinterpret_cast<::VECTOR3*>(p);
  }
  return _impl_.movepos_;
}
inline ::VECTOR3* SC_MOVESTATE::mutable_movepos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::VECTOR3* _msg = _internal_mutable_movepos();
  // @@protoc_insertion_point(field_mutable:SC_MOVESTATE.movePos)
  return _msg;
}
inline void SC_MOVESTATE::set_allocated_movepos(::VECTOR3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::VECTOR3*>(_impl_.movepos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::VECTOR3*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.movepos_ = reinterpret_cast<::VECTOR3*>(value);
  // @@protoc_insertion_point(field_set_allocated:SC_MOVESTATE.movePos)
}

// -------------------------------------------------------------------

// SC_VIEWINRANGE

// int64 id = 1;
inline void SC_VIEWINRANGE::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t SC_VIEWINRANGE::id() const {
  // @@protoc_insertion_point(field_get:SC_VIEWINRANGE.id)
  return _internal_id();
}
inline void SC_VIEWINRANGE::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SC_VIEWINRANGE.id)
}
inline ::int64_t SC_VIEWINRANGE::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void SC_VIEWINRANGE::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .VECTOR3 position = 2;
inline bool SC_VIEWINRANGE::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void SC_VIEWINRANGE::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::VECTOR3& SC_VIEWINRANGE::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::VECTOR3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::VECTOR3&>(::_VECTOR3_default_instance_);
}
inline const ::VECTOR3& SC_VIEWINRANGE::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SC_VIEWINRANGE.position)
  return _internal_position();
}
inline void SC_VIEWINRANGE::unsafe_arena_set_allocated_position(::VECTOR3* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::VECTOR3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC_VIEWINRANGE.position)
}
inline ::VECTOR3* SC_VIEWINRANGE::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::VECTOR3* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::VECTOR3* SC_VIEWINRANGE::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:SC_VIEWINRANGE.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::VECTOR3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::VECTOR3* SC_VIEWINRANGE::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::VECTOR3>(GetArena());
    _impl_.position_ = reinterpret_cast<::VECTOR3*>(p);
  }
  return _impl_.position_;
}
inline ::VECTOR3* SC_VIEWINRANGE::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::VECTOR3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:SC_VIEWINRANGE.position)
  return _msg;
}
inline void SC_VIEWINRANGE::set_allocated_position(::VECTOR3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::VECTOR3*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::VECTOR3*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::VECTOR3*>(value);
  // @@protoc_insertion_point(field_set_allocated:SC_VIEWINRANGE.position)
}

// int64 cellindex = 3;
inline void SC_VIEWINRANGE::clear_cellindex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cellindex_ = ::int64_t{0};
}
inline ::int64_t SC_VIEWINRANGE::cellindex() const {
  // @@protoc_insertion_point(field_get:SC_VIEWINRANGE.cellindex)
  return _internal_cellindex();
}
inline void SC_VIEWINRANGE::set_cellindex(::int64_t value) {
  _internal_set_cellindex(value);
  // @@protoc_insertion_point(field_set:SC_VIEWINRANGE.cellindex)
}
inline ::int64_t SC_VIEWINRANGE::_internal_cellindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cellindex_;
}
inline void SC_VIEWINRANGE::_internal_set_cellindex(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cellindex_ = value;
}

// int64 type = 4;
inline void SC_VIEWINRANGE::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = ::int64_t{0};
}
inline ::int64_t SC_VIEWINRANGE::type() const {
  // @@protoc_insertion_point(field_get:SC_VIEWINRANGE.type)
  return _internal_type();
}
inline void SC_VIEWINRANGE::set_type(::int64_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SC_VIEWINRANGE.type)
}
inline ::int64_t SC_VIEWINRANGE::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void SC_VIEWINRANGE::_internal_set_type(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// CS_LOGIN

// int64 id = 1;
inline void CS_LOGIN::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t CS_LOGIN::id() const {
  // @@protoc_insertion_point(field_get:CS_LOGIN.id)
  return _internal_id();
}
inline void CS_LOGIN::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CS_LOGIN.id)
}
inline ::int64_t CS_LOGIN::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CS_LOGIN::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// CS_MOVE

// int64 id = 1;
inline void CS_MOVE::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t CS_MOVE::id() const {
  // @@protoc_insertion_point(field_get:CS_MOVE.id)
  return _internal_id();
}
inline void CS_MOVE::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CS_MOVE.id)
}
inline ::int64_t CS_MOVE::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CS_MOVE::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .VECTOR3 movePos = 2;
inline bool CS_MOVE::has_movepos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.movepos_ != nullptr);
  return value;
}
inline void CS_MOVE::clear_movepos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.movepos_ != nullptr) _impl_.movepos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::VECTOR3& CS_MOVE::_internal_movepos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::VECTOR3* p = _impl_.movepos_;
  return p != nullptr ? *p : reinterpret_cast<const ::VECTOR3&>(::_VECTOR3_default_instance_);
}
inline const ::VECTOR3& CS_MOVE::movepos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CS_MOVE.movePos)
  return _internal_movepos();
}
inline void CS_MOVE::unsafe_arena_set_allocated_movepos(::VECTOR3* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.movepos_);
  }
  _impl_.movepos_ = reinterpret_cast<::VECTOR3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CS_MOVE.movePos)
}
inline ::VECTOR3* CS_MOVE::release_movepos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::VECTOR3* released = _impl_.movepos_;
  _impl_.movepos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::VECTOR3* CS_MOVE::unsafe_arena_release_movepos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CS_MOVE.movePos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::VECTOR3* temp = _impl_.movepos_;
  _impl_.movepos_ = nullptr;
  return temp;
}
inline ::VECTOR3* CS_MOVE::_internal_mutable_movepos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.movepos_ == nullptr) {
    auto* p = CreateMaybeMessage<::VECTOR3>(GetArena());
    _impl_.movepos_ = reinterpret_cast<::VECTOR3*>(p);
  }
  return _impl_.movepos_;
}
inline ::VECTOR3* CS_MOVE::mutable_movepos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::VECTOR3* _msg = _internal_mutable_movepos();
  // @@protoc_insertion_point(field_mutable:CS_MOVE.movePos)
  return _msg;
}
inline void CS_MOVE::set_allocated_movepos(::VECTOR3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::VECTOR3*>(_impl_.movepos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::VECTOR3*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.movepos_ = reinterpret_cast<::VECTOR3*>(value);
  // @@protoc_insertion_point(field_set_allocated:CS_MOVE.movePos)
}

// -------------------------------------------------------------------

// CS_CHARSTATE

// int64 id = 1;
inline void CS_CHARSTATE::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t CS_CHARSTATE::id() const {
  // @@protoc_insertion_point(field_get:CS_CHARSTATE.id)
  return _internal_id();
}
inline void CS_CHARSTATE::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CS_CHARSTATE.id)
}
inline ::int64_t CS_CHARSTATE::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CS_CHARSTATE::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int64 type = 2;
inline void CS_CHARSTATE::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = ::int64_t{0};
}
inline ::int64_t CS_CHARSTATE::type() const {
  // @@protoc_insertion_point(field_get:CS_CHARSTATE.type)
  return _internal_type();
}
inline void CS_CHARSTATE::set_type(::int64_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CS_CHARSTATE.type)
}
inline ::int64_t CS_CHARSTATE::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void CS_CHARSTATE::_internal_set_type(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string trigger = 3;
inline void CS_CHARSTATE::clear_trigger() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trigger_.ClearToEmpty();
}
inline const std::string& CS_CHARSTATE::trigger() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CS_CHARSTATE.trigger)
  return _internal_trigger();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CS_CHARSTATE::set_trigger(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trigger_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CS_CHARSTATE.trigger)
}
inline std::string* CS_CHARSTATE::mutable_trigger() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trigger();
  // @@protoc_insertion_point(field_mutable:CS_CHARSTATE.trigger)
  return _s;
}
inline const std::string& CS_CHARSTATE::_internal_trigger() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trigger_.Get();
}
inline void CS_CHARSTATE::_internal_set_trigger(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trigger_.Set(value, GetArena());
}
inline std::string* CS_CHARSTATE::_internal_mutable_trigger() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.trigger_.Mutable( GetArena());
}
inline std::string* CS_CHARSTATE::release_trigger() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CS_CHARSTATE.trigger)
  return _impl_.trigger_.Release();
}
inline void CS_CHARSTATE::set_allocated_trigger(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trigger_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trigger_.IsDefault()) {
          _impl_.trigger_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CS_CHARSTATE.trigger)
}

// -------------------------------------------------------------------

// CS_ATTACK

// int64 id = 1;
inline void CS_ATTACK::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t CS_ATTACK::id() const {
  // @@protoc_insertion_point(field_get:CS_ATTACK.id)
  return _internal_id();
}
inline void CS_ATTACK::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CS_ATTACK.id)
}
inline ::int64_t CS_ATTACK::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CS_ATTACK::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .VECTOR3 attackPos = 2;
inline bool CS_ATTACK::has_attackpos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attackpos_ != nullptr);
  return value;
}
inline void CS_ATTACK::clear_attackpos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.attackpos_ != nullptr) _impl_.attackpos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::VECTOR3& CS_ATTACK::_internal_attackpos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::VECTOR3* p = _impl_.attackpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::VECTOR3&>(::_VECTOR3_default_instance_);
}
inline const ::VECTOR3& CS_ATTACK::attackpos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CS_ATTACK.attackPos)
  return _internal_attackpos();
}
inline void CS_ATTACK::unsafe_arena_set_allocated_attackpos(::VECTOR3* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attackpos_);
  }
  _impl_.attackpos_ = reinterpret_cast<::VECTOR3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CS_ATTACK.attackPos)
}
inline ::VECTOR3* CS_ATTACK::release_attackpos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::VECTOR3* released = _impl_.attackpos_;
  _impl_.attackpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::VECTOR3* CS_ATTACK::unsafe_arena_release_attackpos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CS_ATTACK.attackPos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::VECTOR3* temp = _impl_.attackpos_;
  _impl_.attackpos_ = nullptr;
  return temp;
}
inline ::VECTOR3* CS_ATTACK::_internal_mutable_attackpos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.attackpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::VECTOR3>(GetArena());
    _impl_.attackpos_ = reinterpret_cast<::VECTOR3*>(p);
  }
  return _impl_.attackpos_;
}
inline ::VECTOR3* CS_ATTACK::mutable_attackpos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::VECTOR3* _msg = _internal_mutable_attackpos();
  // @@protoc_insertion_point(field_mutable:CS_ATTACK.attackPos)
  return _msg;
}
inline void CS_ATTACK::set_allocated_attackpos(::VECTOR3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::VECTOR3*>(_impl_.attackpos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::VECTOR3*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.attackpos_ = reinterpret_cast<::VECTOR3*>(value);
  // @@protoc_insertion_point(field_set_allocated:CS_ATTACK.attackPos)
}

// float damage = 3;
inline void CS_ATTACK::clear_damage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.damage_ = 0;
}
inline float CS_ATTACK::damage() const {
  // @@protoc_insertion_point(field_get:CS_ATTACK.damage)
  return _internal_damage();
}
inline void CS_ATTACK::set_damage(float value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:CS_ATTACK.damage)
}
inline float CS_ATTACK::_internal_damage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.damage_;
}
inline void CS_ATTACK::_internal_set_damage(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.damage_ = value;
}

// -------------------------------------------------------------------

// CS_DISCONNECT

// int64 id = 1;
inline void CS_DISCONNECT::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t CS_DISCONNECT::id() const {
  // @@protoc_insertion_point(field_get:CS_DISCONNECT.id)
  return _internal_id();
}
inline void CS_DISCONNECT::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CS_DISCONNECT.id)
}
inline ::int64_t CS_DISCONNECT::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CS_DISCONNECT::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Direction> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Direction>() {
  return ::Direction_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto_2epb_2eh
